{"version":3,"sources":["algorithm/expression.js"],"names":["define","infix2suffix","src","operatorStack","stack","i","length","c","charAt","push","c1","pop","last"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aAiCA,OAASC,aAhCYC,IACjB,MAAMC,KACAC,KACN,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAII,OAAQD,GAAK,EAAG,CACpC,MAAME,EAAIL,EAAIM,OAAOH,GACrB,GAAU,MAANE,EACA,GAAIA,GAAK,KAAOA,GAAK,IACjBH,EAAMK,KAAKF,QACR,GAAU,MAANA,EAAW,CAClB,IAAIG,EAAKP,EAAcQ,MACvB,KAAc,MAAPD,GACHN,EAAMK,KAAKC,GACXA,EAAKP,EAAcQ,UAEpB,CACH,GAAIR,EAAcG,OAAS,IAAY,MAANC,GAAmB,MAANA,GAAY,CACtD,MAAMK,EAAOT,EAAcA,EAAcG,OAAS,GAClD,GAAa,MAATM,GAAyB,MAATA,EAChB,KAAOT,EAAcG,OAAS,GAC1BF,EAAMK,KAAKN,EAAcQ,OAIrCR,EAAcM,KAAKF,IAI/B,KAAOJ,EAAcG,OAAS,GAC1BF,EAAMK,KAAKN,EAAcQ,OAE7B,OAAOP","file":"../../algorithm/expression.js","sourcesContent":["define(function () {\n    'use strict';\n    const infix2suffix = src => {\n        const operatorStack = [];\n        const stack = [];\n        for (let i = 0; i < src.length; i += 1) {\n            const c = src.charAt(i);\n            if (c !== ' ') {\n                if (c >= '0' && c <= '9') {\n                    stack.push(c);\n                } else if (c === ')') {\n                    let c1 = operatorStack.pop();\n                    while (c1 !== '(') {\n                        stack.push(c1);\n                        c1 = operatorStack.pop();\n                    }\n                } else {\n                    if (operatorStack.length > 0 && (c === '+' || c === '-')) {\n                        const last = operatorStack[operatorStack.length - 1];\n                        if (last === '*' || last === '/') {\n                            while (operatorStack.length > 0) {\n                                stack.push(operatorStack.pop());\n                            }\n                        }\n                    }\n                    operatorStack.push(c);\n                }\n            }\n        }\n        while (operatorStack.length > 0) {\n            stack.push(operatorStack.pop());\n        }\n        return stack;\n    };\n    return { infix2suffix };\n});"]}