{"version":3,"sources":["component/event.js"],"names":["define","bind","target","name","fn","addEventListener","unbind","removeEventListener","unbindClickoutside","el","xclickoutside","window","document","body","calTouchDirection","spanx","spany","evt","cb","direction","Math","abs","bindClickoutside","detail","contains","hide","mouseMoveUp","movefunc","upfunc","xEvtUp","bindTouch","move","end","startx","starty","pageX","pageY","touches","changedTouches","preventDefault"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aACA,SAASC,EAAKC,EAAQC,EAAMC,GACxBF,EAAOG,iBAAiBF,EAAMC,GAElC,SAASE,EAAOJ,EAAQC,EAAMC,GAC1BF,EAAOK,oBAAoBJ,EAAMC,GAErC,SAASI,EAAmBC,GACpBA,EAAGC,gBACHJ,EAAOK,OAAOC,SAASC,KAAM,QAASJ,EAAGC,sBAClCD,EAAGC,eA0BlB,SAASI,EAAkBC,EAAOC,EAAOC,EAAKC,GAC1C,IAAIC,EAAY,GACZC,KAAKC,IAAIN,GAASK,KAAKC,IAAIL,GAE3BE,EADAC,EAAYJ,EAAQ,EAAI,QAAU,OACpBA,EAAOE,GAGrBC,EADAC,EAAYH,EAAQ,EAAI,OAAS,KACnBA,EAAOC,GAiC7B,OACIhB,KAAMA,EACNK,OAAQA,EACRE,mBAAoBA,EACpBc,iBAnEJ,SAA0Bb,EAAIS,GAC1BT,EAAGC,cAAgBO,CAAAA,IACI,IAAfA,EAAIM,QAAgBd,EAAGe,SAASP,EAAIf,UAEpCgB,EACAA,EAAGT,IAEHA,EAAGgB,OACHjB,EAAmBC,OAG3BR,EAAKU,OAAOC,SAASC,KAAM,QAASJ,EAAGC,gBAyDvCgB,YAvDJ,SAAqBxB,EAAQyB,EAAUC,GACnC3B,EAAKC,EAAQ,YAAayB,GAChBzB,EACR2B,OAASZ,CAAAA,IACPX,EAAOJ,EAAQ,YAAayB,GAC5BrB,EAAOJ,EAAQ,UAAWA,EAAO2B,QACjCD,EAAOX,KAEXhB,EAAKC,EAAQ,UAAWA,EAAO2B,SAgD/BC,UApCJ,SAAmB5B,GAAQ6B,KAACA,EAAIC,IAAEA,IAC9B,IAAIC,EAAS,EACTC,EAAS,EACbjC,EAAKC,EAAQ,aAAce,IACvB,MAAMkB,MAACA,EAAKC,MAAEA,GAASnB,EAAIoB,QAAQ,GACnCJ,EAASE,EACTD,EAASE,IAEbnC,EAAKC,EAAQ,YAAae,IACtB,IAAKc,EACD,OACJ,MAAMI,MAACA,EAAKC,MAAEA,GAASnB,EAAIqB,eAAe,GACpCvB,EAAQoB,EAAQF,EAChBjB,EAAQoB,EAAQF,GAClBd,KAAKC,IAAIN,GAAS,IAAMK,KAAKC,IAAIL,GAAS,MAC1CF,EAAkBC,EAAOC,EAAOC,EAAKc,GACrCE,EAASE,EACTD,EAASE,GAEbnB,EAAIsB,mBAERtC,EAAKC,EAAQ,WAAYe,IACrB,IAAKe,EACD,OACJ,MAAMG,MAACA,EAAKC,MAAEA,GAASnB,EAAIqB,eAAe,GAG1CxB,EAFcqB,EAAQF,EACRG,EAAQF,EACUjB,EAAKe","file":"../../component/event.js","sourcesContent":["define(function () {\n    'use strict';\n    function bind(target, name, fn) {\n        target.addEventListener(name, fn);\n    }\n    function unbind(target, name, fn) {\n        target.removeEventListener(name, fn);\n    }\n    function unbindClickoutside(el) {\n        if (el.xclickoutside) {\n            unbind(window.document.body, 'click', el.xclickoutside);\n            delete el.xclickoutside;\n        }\n    }\n    function bindClickoutside(el, cb) {\n        el.xclickoutside = evt => {\n            if (evt.detail === 2 || el.contains(evt.target))\n                return;\n            if (cb)\n                cb(el);\n            else {\n                el.hide();\n                unbindClickoutside(el);\n            }\n        };\n        bind(window.document.body, 'click', el.xclickoutside);\n    }\n    function mouseMoveUp(target, movefunc, upfunc) {\n        bind(target, 'mousemove', movefunc);\n        const t = target;\n        t.xEvtUp = evt => {\n            unbind(target, 'mousemove', movefunc);\n            unbind(target, 'mouseup', target.xEvtUp);\n            upfunc(evt);\n        };\n        bind(target, 'mouseup', target.xEvtUp);\n    }\n    function calTouchDirection(spanx, spany, evt, cb) {\n        let direction = '';\n        if (Math.abs(spanx) > Math.abs(spany)) {\n            direction = spanx > 0 ? 'right' : 'left';\n            cb(direction, spanx, evt);\n        } else {\n            direction = spany > 0 ? 'down' : 'up';\n            cb(direction, spany, evt);\n        }\n    }\n    function bindTouch(target, {move, end}) {\n        let startx = 0;\n        let starty = 0;\n        bind(target, 'touchstart', evt => {\n            const {pageX, pageY} = evt.touches[0];\n            startx = pageX;\n            starty = pageY;\n        });\n        bind(target, 'touchmove', evt => {\n            if (!move)\n                return;\n            const {pageX, pageY} = evt.changedTouches[0];\n            const spanx = pageX - startx;\n            const spany = pageY - starty;\n            if (Math.abs(spanx) > 10 || Math.abs(spany) > 10) {\n                calTouchDirection(spanx, spany, evt, move);\n                startx = pageX;\n                starty = pageY;\n            }\n            evt.preventDefault();\n        });\n        bind(target, 'touchend', evt => {\n            if (!end)\n                return;\n            const {pageX, pageY} = evt.changedTouches[0];\n            const spanx = pageX - startx;\n            const spany = pageY - starty;\n            calTouchDirection(spanx, spany, evt, end);\n        });\n    }\n    return {\n        bind: bind,\n        unbind: unbind,\n        unbindClickoutside: unbindClickoutside,\n        bindClickoutside: bindClickoutside,\n        mouseMoveUp: mouseMoveUp,\n        bindTouch: bindTouch\n    };\n});"]}