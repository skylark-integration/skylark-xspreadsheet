{"version":3,"sources":["component/selector.js"],"names":["define","m_element","m_config","m_cell_range","selectorHeightBorderWidth","startZIndex","SelectorElement","[object Object]","useHideInput","this","inputChange","cornerEl","h","cssPrefix","areaEl","child","hide","clipboardEl","autofillEl","el","css","children","hideInput","on","evt","target","value","hideInputDiv","v","offset","show","left","top","width","height","of","val","focus","calBRAreaOffset","data","scroll","l","t","ftwidth","freezeTotalWidth","ftheight","freezeTotalHeight","left0","x","top0","y","calTAreaOffset","calLAreaOffset","setBRAreaOffset","br","setAreaOffset","call","setTAreaOffset","setLAreaOffset","setLClipboardOffset","setClipboardOffset","setBRClipboardOffset","setTClipboardOffset","setAllAreaOffset","tl","setAllClipboardOffset","areaOffset","indexes","range","arange","lastri","lastci","selector","resetAreaOffset","freezeHeight","freezeWidth","setOffset","getSelectedRect","coffset","getClipboardRect","resetOffset","ri","ci","indexesUpdated","cellRange","calSelectedRangeByStart","sri","sci","cri","cci","setIndexes","moveIndexes","moving","calSelectedRangeByEnd","eri","eci","setEnd","nri","nci","srn","ern","ecn","CellRange","getRect","showAutofill","forEach","property","hideAutofill","showClipboard","hideClipboard"],"mappings":"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","file":"../../component/selector.js","sourcesContent":["define([\n    './element',\n    '../config',\n    '../core/cell_range'\n], function (m_element, m_config, m_cell_range) {\n    'use strict';\n    const selectorHeightBorderWidth = 2 * 2 - 1;\n    let startZIndex = 10;\n    class SelectorElement {\n        constructor(useHideInput = false) {\n            this.useHideInput = useHideInput;\n            this.inputChange = () => {\n            };\n            this.cornerEl = m_element.h('div', `${ m_config.cssPrefix }-selector-corner`);\n            this.areaEl = m_element.h('div', `${ m_config.cssPrefix }-selector-area`).child(this.cornerEl).hide();\n            this.clipboardEl = m_element.h('div', `${ m_config.cssPrefix }-selector-clipboard`).hide();\n            this.autofillEl = m_element.h('div', `${ m_config.cssPrefix }-selector-autofill`).hide();\n            this.el = m_element.h('div', `${ m_config.cssPrefix }-selector`).css('z-index', `${ startZIndex }`).children(this.areaEl, this.clipboardEl, this.autofillEl).hide();\n            if (useHideInput) {\n                this.hideInput = m_element.h('input', '').on('compositionend', evt => {\n                    this.inputChange(evt.target.value);\n                });\n                this.el.child(this.hideInputDiv = m_element.h('div', 'hide-input').child(this.hideInput));\n                this.el.child(this.hideInputDiv = m_element.h('div', 'hide-input').child(this.hideInput));\n            }\n            startZIndex += 1;\n        }\n        setOffset(v) {\n            this.el.offset(v).show();\n            return this;\n        }\n        hide() {\n            this.el.hide();\n            return this;\n        }\n        setAreaOffset(v) {\n            const {left, top, width, height} = v;\n            const of = {\n                width: width - selectorHeightBorderWidth + 0.8,\n                height: height - selectorHeightBorderWidth + 0.8,\n                left: left - 0.8,\n                top: top - 0.8\n            };\n            this.areaEl.offset(of).show();\n            if (this.useHideInput) {\n                this.hideInputDiv.offset(of);\n                this.hideInput.val('').focus();\n            }\n        }\n        setClipboardOffset(v) {\n            const {left, top, width, height} = v;\n            this.clipboardEl.offset({\n                left,\n                top,\n                width: width - 5,\n                height: height - 5\n            });\n        }\n        showAutofill(v) {\n            const {left, top, width, height} = v;\n            this.autofillEl.offset({\n                width: width - selectorHeightBorderWidth,\n                height: height - selectorHeightBorderWidth,\n                left,\n                top\n            }).show();\n        }\n        hideAutofill() {\n            this.autofillEl.hide();\n        }\n        showClipboard() {\n            this.clipboardEl.show();\n        }\n        hideClipboard() {\n            this.clipboardEl.hide();\n        }\n    }\n    function calBRAreaOffset(offset) {\n        const {data} = this;\n        const {left, top, width, height, scroll, l, t} = offset;\n        const ftwidth = data.freezeTotalWidth();\n        const ftheight = data.freezeTotalHeight();\n        let left0 = left - ftwidth;\n        if (ftwidth > l)\n            left0 -= scroll.x;\n        let top0 = top - ftheight;\n        if (ftheight > t)\n            top0 -= scroll.y;\n        return {\n            left: left0,\n            top: top0,\n            width,\n            height\n        };\n    }\n    function calTAreaOffset(offset) {\n        const {data} = this;\n        const {left, width, height, l, t, scroll} = offset;\n        const ftwidth = data.freezeTotalWidth();\n        let left0 = left - ftwidth;\n        if (ftwidth > l)\n            left0 -= scroll.x;\n        return {\n            left: left0,\n            top: t,\n            width,\n            height\n        };\n    }\n    function calLAreaOffset(offset) {\n        const {data} = this;\n        const {top, width, height, l, t, scroll} = offset;\n        const ftheight = data.freezeTotalHeight();\n        let top0 = top - ftheight;\n        if (ftheight > t)\n            top0 -= scroll.y;\n        return {\n            left: l,\n            top: top0,\n            width,\n            height\n        };\n    }\n    function setBRAreaOffset(offset) {\n        const {br} = this;\n        br.setAreaOffset(calBRAreaOffset.call(this, offset));\n    }\n    function setTLAreaOffset(offset) {\n        const {tl} = this;\n        tl.setAreaOffset(offset);\n    }\n    function setTAreaOffset(offset) {\n        const {t} = this;\n        t.setAreaOffset(calTAreaOffset.call(this, offset));\n    }\n    function setLAreaOffset(offset) {\n        const {l} = this;\n        l.setAreaOffset(calLAreaOffset.call(this, offset));\n    }\n    function setLClipboardOffset(offset) {\n        const {l} = this;\n        l.setClipboardOffset(calLAreaOffset.call(this, offset));\n    }\n    function setBRClipboardOffset(offset) {\n        const {br} = this;\n        br.setClipboardOffset(calBRAreaOffset.call(this, offset));\n    }\n    function setTLClipboardOffset(offset) {\n        const {tl} = this;\n        tl.setClipboardOffset(offset);\n    }\n    function setTClipboardOffset(offset) {\n        const {t} = this;\n        t.setClipboardOffset(calTAreaOffset.call(this, offset));\n    }\n    function setAllAreaOffset(offset) {\n        setBRAreaOffset.call(this, offset);\n        setTLAreaOffset.call(this, offset);\n        setTAreaOffset.call(this, offset);\n        setLAreaOffset.call(this, offset);\n    }\n    function setAllClipboardOffset(offset) {\n        setBRClipboardOffset.call(this, offset);\n        setTLClipboardOffset.call(this, offset);\n        setTClipboardOffset.call(this, offset);\n        setLClipboardOffset.call(this, offset);\n    }\n    return class Selector {\n        constructor(data) {\n            this.inputChange = () => {\n            };\n            this.data = data;\n            this.br = new SelectorElement(true);\n            this.t = new SelectorElement();\n            this.l = new SelectorElement();\n            this.tl = new SelectorElement();\n            this.br.inputChange = v => {\n                this.inputChange(v);\n            };\n            this.br.el.show();\n            this.offset = null;\n            this.areaOffset = null;\n            this.indexes = null;\n            this.range = null;\n            this.arange = null;\n            this.el = m_element.h('div', `${ m_config.cssPrefix }-selectors`).children(this.tl.el, this.t.el, this.l.el, this.br.el).hide();\n            this.lastri = -1;\n            this.lastci = -1;\n            startZIndex += 1;\n        }\n        resetData(data) {\n            this.data = data;\n            this.range = data.selector.range;\n            this.resetAreaOffset();\n        }\n        hide() {\n            this.el.hide();\n        }\n        resetOffset() {\n            const {data, tl, t, l, br} = this;\n            const freezeHeight = data.freezeTotalHeight();\n            const freezeWidth = data.freezeTotalWidth();\n            if (freezeHeight > 0 || freezeWidth > 0) {\n                tl.setOffset({\n                    width: freezeWidth,\n                    height: freezeHeight\n                });\n                t.setOffset({\n                    left: freezeWidth,\n                    height: freezeHeight\n                });\n                l.setOffset({\n                    top: freezeHeight,\n                    width: freezeWidth\n                });\n                br.setOffset({\n                    left: freezeWidth,\n                    top: freezeHeight\n                });\n            } else {\n                tl.hide();\n                t.hide();\n                l.hide();\n                br.setOffset({\n                    left: 0,\n                    top: 0\n                });\n            }\n        }\n        resetAreaOffset() {\n            const offset = this.data.getSelectedRect();\n            const coffset = this.data.getClipboardRect();\n            setAllAreaOffset.call(this, offset);\n            setAllClipboardOffset.call(this, coffset);\n            this.resetOffset();\n        }\n        resetBRTAreaOffset() {\n            const offset = this.data.getSelectedRect();\n            const coffset = this.data.getClipboardRect();\n            setBRAreaOffset.call(this, offset);\n            setTAreaOffset.call(this, offset);\n            setBRClipboardOffset.call(this, coffset);\n            setTClipboardOffset.call(this, coffset);\n            this.resetOffset();\n        }\n        resetBRLAreaOffset() {\n            const offset = this.data.getSelectedRect();\n            const coffset = this.data.getClipboardRect();\n            setBRAreaOffset.call(this, offset);\n            setLAreaOffset.call(this, offset);\n            setBRClipboardOffset.call(this, coffset);\n            setLClipboardOffset.call(this, coffset);\n            this.resetOffset();\n        }\n        set(ri, ci, indexesUpdated = true) {\n            const {data} = this;\n            const cellRange = data.calSelectedRangeByStart(ri, ci);\n            const {sri, sci} = cellRange;\n            if (indexesUpdated) {\n                let [cri, cci] = [\n                    ri,\n                    ci\n                ];\n                if (ri < 0)\n                    cri = 0;\n                if (ci < 0)\n                    cci = 0;\n                data.selector.setIndexes(cri, cci);\n                this.indexes = [\n                    cri,\n                    cci\n                ];\n            }\n            this.moveIndexes = [\n                sri,\n                sci\n            ];\n            this.range = cellRange;\n            this.resetAreaOffset();\n            this.el.show();\n        }\n        setEnd(ri, ci, moving = true) {\n            const {data, lastri, lastci} = this;\n            if (moving) {\n                if (ri === lastri && ci === lastci)\n                    return;\n                this.lastri = ri;\n                this.lastci = ci;\n            }\n            this.range = data.calSelectedRangeByEnd(ri, ci);\n            setAllAreaOffset.call(this, this.data.getSelectedRect());\n        }\n        reset() {\n            const {eri, eci} = this.data.selector.range;\n            this.setEnd(eri, eci);\n        }\n        showAutofill(ri, ci) {\n            if (ri === -1 && ci === -1)\n                return;\n            const {sri, sci, eri, eci} = this.range;\n            const [nri, nci] = [\n                ri,\n                ci\n            ];\n            const srn = sri - ri;\n            const scn = sci - ci;\n            const ern = eri - ri;\n            const ecn = eci - ci;\n            if (scn > 0) {\n                this.arange = new m_cell_range.CellRange(sri, nci, eri, sci - 1);\n            } else if (srn > 0) {\n                this.arange = new m_cell_range.CellRange(nri, sci, sri - 1, eci);\n            } else if (ecn < 0) {\n                this.arange = new m_cell_range.CellRange(sri, eci + 1, eri, nci);\n            } else if (ern < 0) {\n                this.arange = new m_cell_range.CellRange(eri + 1, sci, nri, eci);\n            } else {\n                this.arange = null;\n                return;\n            }\n            if (this.arange !== null) {\n                const offset = this.data.getRect(this.arange);\n                offset.width += 2;\n                offset.height += 2;\n                const {br, l, t, tl} = this;\n                br.showAutofill(calBRAreaOffset.call(this, offset));\n                l.showAutofill(calLAreaOffset.call(this, offset));\n                t.showAutofill(calTAreaOffset.call(this, offset));\n                tl.showAutofill(offset);\n            }\n        }\n        hideAutofill() {\n            [\n                'br',\n                'l',\n                't',\n                'tl'\n            ].forEach(property => {\n                this[property].hideAutofill();\n            });\n        }\n        showClipboard() {\n            const coffset = this.data.getClipboardRect();\n            setAllClipboardOffset.call(this, coffset);\n            [\n                'br',\n                'l',\n                't',\n                'tl'\n            ].forEach(property => {\n                this[property].showClipboard();\n            });\n        }\n        hideClipboard() {\n            [\n                'br',\n                'l',\n                't',\n                'tl'\n            ].forEach(property => {\n                this[property].hideClipboard();\n            });\n        }\n    };\n});"]}