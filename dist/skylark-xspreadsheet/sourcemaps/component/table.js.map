{"version":3,"sources":["component/table.js"],"names":["define","m_alphabet","m_font","m_cell","m_formula","m_format","m_draw","cellPaddingWidth","tableFixedHeaderCleanStyle","fillStyle","tableGridStyle","lineWidth","thinLineWidth","strokeStyle","getDrawBox","data","rindex","cindex","yoffset","left","top","width","height","cellRect","DrawBox","renderCell","draw","sortedRowMap","rows","cols","isHide","nrindex","has","get","cell","getCell","frozen","editable","style","getCellStyleOrDefault","dbox","bgcolor","undefined","border","setBorders","strokeBorders","rect","cellText","render","text","formulam","y","x","getCellTextOrDefault","format","formatm","font","Object","assign","size","getFontSizePxByPt","align","valign","color","strike","underline","textwrap","validations","getError","error","renderContent","viewRange","fw","fh","tx","ty","this","save","translate","exceptRowSet","exceptRowTotalHeight","sri","eri","each","ri","ci","ret","getHeight","filteredTranslateFunc","restore","rset","Set","eachMergesInView","sci","add","sumHeight","autoFilter","active","afRange","hrange","intersects","dropdown","call","renderSelectedHeaderCell","w","h","attr","fillRect","renderFixedHeaders","type","sumWidth","nty","ntx","eci","selector","range","textAlign","textBaseline","npx","rowEach","i","y1","rowHeight","ii","line","fillText","colEach","x1","colWidth","stringAt","renderContentGrid","settings","clearRect","showGrid","ch","cw","Table","[object Object]","el","Draw","viewWidth","viewHeight","indexWidth","resize","clear","freezeTotalWidth","freezeTotalHeight","scroll","fri","fci","freeze","vr","clone","freezeViewRange","ftw","fth","twidth","theight"],"mappings":"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","file":"../../component/table.js","sourcesContent":["define([\n    '../core/alphabet',\n    '../core/font',\n    '../core/cell',\n    '../core/formula',\n    '../core/format',\n    '../canvas/draw'\n], function (m_alphabet, m_font, m_cell, m_formula, m_format, m_draw) {\n    'use strict';\n    const cellPaddingWidth = 5;\n    const tableFixedHeaderCleanStyle = { fillStyle: '#f4f5f8' };\n    const tableGridStyle = {\n        fillStyle: '#fff',\n        lineWidth: m_draw.thinLineWidth,\n        strokeStyle: '#e6e6e6'\n    };\n    function tableFixedHeaderStyle() {\n        return {\n            textAlign: 'center',\n            textBaseline: 'middle',\n            font: `500 ${ m_draw.npx(12) }px Source Sans Pro`,\n            fillStyle: '#585757',\n            lineWidth: m_draw.thinLineWidth(),\n            strokeStyle: '#e6e6e6'\n        };\n    }\n    function getDrawBox(data, rindex, cindex, yoffset = 0) {\n        const {left, top, width, height} = data.cellRect(rindex, cindex);\n        return new m_draw.DrawBox(left, top + yoffset, width, height, cellPaddingWidth);\n    }\n    \n    function renderCell(draw, data, rindex, cindex, yoffset = 0) {\n        const {sortedRowMap, rows, cols} = data;\n        if (rows.isHide(rindex) || cols.isHide(cindex))\n            return;\n        let nrindex = rindex;\n        if (sortedRowMap.has(rindex)) {\n            nrindex = sortedRowMap.get(rindex);\n        }\n        const cell = data.getCell(nrindex, cindex);\n        if (cell === null)\n            return;\n        let frozen = false;\n        if ('editable' in cell && cell.editable === false) {\n            frozen = true;\n        }\n        const style = data.getCellStyleOrDefault(nrindex, cindex);\n        const dbox = getDrawBox(data, rindex, cindex, yoffset);\n        dbox.bgcolor = style.bgcolor;\n        if (style.border !== undefined) {\n            dbox.setBorders(style.border);\n            draw.strokeBorders(dbox);\n        }\n        draw.rect(dbox, () => {\n            let cellText = m_cell.render(cell.text || '', m_formula.formulam, (y, x) => data.getCellTextOrDefault(x, y));\n            if (style.format) {\n                cellText = m_format.formatm[style.format].render(cellText);\n            }\n            const font = Object.assign({}, style.font);\n            font.size = m_font.getFontSizePxByPt(font.size);\n            draw.text(cellText, dbox, {\n                align: style.align,\n                valign: style.valign,\n                font,\n                color: style.color,\n                strike: style.strike,\n                underline: style.underline\n            }, style.textwrap);\n            const error = data.validations.getError(rindex, cindex);\n            if (error) {\n                draw.error(dbox);\n            }\n            if (frozen) {\n                draw.frozen(dbox);\n            }\n        });\n    }\n    function renderAutofilter(viewRange) {\n        const {data, draw} = this;\n        if (viewRange) {\n            const {autoFilter} = data;\n            if (!autoFilter.active())\n                return;\n            const afRange = autoFilter.hrange();\n            if (viewRange.intersects(afRange)) {\n                afRange.each((ri, ci) => {\n                    const dbox = getDrawBox(data, ri, ci);\n                    draw.dropdown(dbox);\n                });\n            }\n        }\n    }\n    function renderContent(viewRange, fw, fh, tx, ty) {\n        const {draw, data} = this;\n        draw.save();\n        draw.translate(fw, fh).translate(tx, ty);\n        const {exceptRowSet} = data;\n        const filteredTranslateFunc = ri => {\n            const ret = exceptRowSet.has(ri);\n            if (ret) {\n                const height = data.rows.getHeight(ri);\n                draw.translate(0, -height);\n            }\n            return !ret;\n        };\n        const exceptRowTotalHeight = data.exceptRowTotalHeight(viewRange.sri, viewRange.eri);\n        draw.save();\n        draw.translate(0, -exceptRowTotalHeight);\n        viewRange.each((ri, ci) => {\n            renderCell(draw, data, ri, ci);\n        }, ri => filteredTranslateFunc(ri));\n        draw.restore();\n        const rset = new Set();\n        draw.save();\n        draw.translate(0, -exceptRowTotalHeight);\n        data.eachMergesInView(viewRange, ({sri, sci, eri}) => {\n            if (!exceptRowSet.has(sri)) {\n                renderCell(draw, data, sri, sci);\n            } else if (!rset.has(sri)) {\n                rset.add(sri);\n                const height = data.rows.sumHeight(sri, eri + 1);\n                draw.translate(0, -height);\n            }\n        });\n        draw.restore();\n        renderAutofilter.call(this, viewRange);\n        draw.restore();\n    }\n    function renderSelectedHeaderCell(x, y, w, h) {\n        const {draw} = this;\n        draw.save();\n        draw.attr({ fillStyle: 'rgba(75, 137, 255, 0.08)' }).fillRect(x, y, w, h);\n        draw.restore();\n    }\n    function renderFixedHeaders(type, viewRange, w, h, tx, ty) {\n        const {draw, data} = this;\n        const sumHeight = viewRange.h;\n        const sumWidth = viewRange.w;\n        const nty = ty + h;\n        const ntx = tx + w;\n        draw.save();\n        draw.attr(tableFixedHeaderCleanStyle);\n        if (type === 'all' || type === 'left')\n            draw.fillRect(0, nty, w, sumHeight);\n        if (type === 'all' || type === 'top')\n            draw.fillRect(ntx, 0, sumWidth, h);\n        const {sri, sci, eri, eci} = data.selector.range;\n        draw.attr(tableFixedHeaderStyle());\n        if (type === 'all' || type === 'left') {\n            data.rowEach(viewRange.sri, viewRange.eri, (i, y1, rowHeight) => {\n                const y = nty + y1;\n                const ii = i;\n                draw.line([\n                    0,\n                    y\n                ], [\n                    w,\n                    y\n                ]);\n                if (sri <= ii && ii < eri + 1) {\n                    renderSelectedHeaderCell.call(this, 0, y, w, rowHeight);\n                }\n                draw.fillText(ii + 1, w / 2, y + rowHeight / 2);\n                if (i > 0 && data.rows.isHide(i - 1)) {\n                    draw.save();\n                    draw.attr({ strokeStyle: '#c6c6c6' });\n                    draw.line([\n                        5,\n                        y + 5\n                    ], [\n                        w - 5,\n                        y + 5\n                    ]);\n                    draw.restore();\n                }\n            });\n            draw.line([\n                0,\n                sumHeight + nty\n            ], [\n                w,\n                sumHeight + nty\n            ]);\n            draw.line([\n                w,\n                nty\n            ], [\n                w,\n                sumHeight + nty\n            ]);\n        }\n        if (type === 'all' || type === 'top') {\n            data.colEach(viewRange.sci, viewRange.eci, (i, x1, colWidth) => {\n                const x = ntx + x1;\n                const ii = i;\n                draw.line([\n                    x,\n                    0\n                ], [\n                    x,\n                    h\n                ]);\n                if (sci <= ii && ii < eci + 1) {\n                    renderSelectedHeaderCell.call(this, x, 0, colWidth, h);\n                }\n                draw.fillText(m_alphabet.stringAt(ii), x + colWidth / 2, h / 2);\n                if (i > 0 && data.cols.isHide(i - 1)) {\n                    draw.save();\n                    draw.attr({ strokeStyle: '#c6c6c6' });\n                    draw.line([\n                        x + 5,\n                        5\n                    ], [\n                        x + 5,\n                        h - 5\n                    ]);\n                    draw.restore();\n                }\n            });\n            draw.line([\n                sumWidth + ntx,\n                0\n            ], [\n                sumWidth + ntx,\n                h\n            ]);\n            draw.line([\n                0,\n                h\n            ], [\n                sumWidth + ntx,\n                h\n            ]);\n        }\n        draw.restore();\n    }\n    function renderFixedLeftTopCell(fw, fh) {\n        const {draw} = this;\n        draw.save();\n        draw.attr({ fillStyle: '#f4f5f8' }).fillRect(0, 0, fw, fh);\n        draw.restore();\n    }\n    function renderContentGrid({sri, sci, eri, eci, w, h}, fw, fh, tx, ty) {\n        const {draw, data} = this;\n        const {settings} = data;\n        draw.save();\n        draw.attr(tableGridStyle).translate(fw + tx, fh + ty);\n        draw.clearRect(0, 0, w, h);\n        if (!settings.showGrid) {\n            draw.restore();\n            return;\n        }\n        data.rowEach(sri, eri, (i, y, ch) => {\n            if (i !== sri)\n                draw.line([\n                    0,\n                    y\n                ], [\n                    w,\n                    y\n                ]);\n            if (i === eri)\n                draw.line([\n                    0,\n                    y + ch\n                ], [\n                    w,\n                    y + ch\n                ]);\n        });\n        data.colEach(sci, eci, (i, x, cw) => {\n            if (i !== sci)\n                draw.line([\n                    x,\n                    0\n                ], [\n                    x,\n                    h\n                ]);\n            if (i === eci)\n                draw.line([\n                    x + cw,\n                    0\n                ], [\n                    x + cw,\n                    h\n                ]);\n        });\n        draw.restore();\n    }\n    function renderFreezeHighlightLine(fw, fh, ftw, fth) {\n        const {draw, data} = this;\n        const twidth = data.viewWidth() - fw;\n        const theight = data.viewHeight() - fh;\n        draw.save().translate(fw, fh).attr({ strokeStyle: 'rgba(75, 137, 255, .6)' });\n        draw.line([\n            0,\n            fth\n        ], [\n            twidth,\n            fth\n        ]);\n        draw.line([\n            ftw,\n            0\n        ], [\n            ftw,\n            theight\n        ]);\n        draw.restore();\n    }\n    class Table {\n        constructor(el, data) {\n            this.el = el;\n            this.draw = new m_draw.Draw(el, data.viewWidth(), data.viewHeight());\n            this.data = data;\n        }\n        resetData(data) {\n            this.data = data;\n            this.render();\n        }\n        render() {\n            const {data} = this;\n            const {rows, cols} = data;\n            const fw = cols.indexWidth;\n            const fh = rows.height;\n            this.draw.resize(data.viewWidth(), data.viewHeight());\n            this.clear();\n            const viewRange = data.viewRange();\n            const tx = data.freezeTotalWidth();\n            const ty = data.freezeTotalHeight();\n            const {x, y} = data.scroll;\n            renderContentGrid.call(this, viewRange, fw, fh, tx, ty);\n            renderContent.call(this, viewRange, fw, fh, -x, -y);\n            renderFixedHeaders.call(this, 'all', viewRange, fw, fh, tx, ty);\n            renderFixedLeftTopCell.call(this, fw, fh);\n            const [fri, fci] = data.freeze;\n            if (fri > 0 || fci > 0) {\n                if (fri > 0) {\n                    const vr = viewRange.clone();\n                    vr.sri = 0;\n                    vr.eri = fri - 1;\n                    vr.h = ty;\n                    renderContentGrid.call(this, vr, fw, fh, tx, 0);\n                    renderContent.call(this, vr, fw, fh, -x, 0);\n                    renderFixedHeaders.call(this, 'top', vr, fw, fh, tx, 0);\n                }\n                if (fci > 0) {\n                    const vr = viewRange.clone();\n                    vr.sci = 0;\n                    vr.eci = fci - 1;\n                    vr.w = tx;\n                    renderContentGrid.call(this, vr, fw, fh, 0, ty);\n                    renderFixedHeaders.call(this, 'left', vr, fw, fh, 0, ty);\n                    renderContent.call(this, vr, fw, fh, 0, -y);\n                }\n                const freezeViewRange = data.freezeViewRange();\n                renderContentGrid.call(this, freezeViewRange, fw, fh, 0, 0);\n                renderFixedHeaders.call(this, 'all', freezeViewRange, fw, fh, 0, 0);\n                renderContent.call(this, freezeViewRange, fw, fh, 0, 0);\n                renderFreezeHighlightLine.call(this, fw, fh, tx, ty);\n            }\n        }\n        clear() {\n            this.draw.clear();\n        }\n    }\n    return {\n        renderCell,\n        Table\n    };\n});"]}