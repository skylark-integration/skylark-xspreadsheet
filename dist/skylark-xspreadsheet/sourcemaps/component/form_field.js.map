{"version":3,"sources":["component/form_field.js"],"names":["define","m_element","m_config","m_locale","patterns","number","date","[object Object]","input","rule","label","labelWidth","this","h","css","html","tip","child","hide","vchange","validate","el","cssPrefix","children","show","v","val","hint","required","test","t","addClass","type","pattern","removeClass"],"mappings":";;;;;;;AAAAA,QACI,YACA,YACA,oBACD,SAAUC,EAAWC,EAAUC,GAC9B,aACA,MAAMC,GACFC,OAAQ,8BACRC,KAAM,2BAEV,aACIC,YAAYC,EAAOC,EAAMC,EAAOC,GAC5BC,KAAKF,MAAQ,GACbE,KAAKH,KAAOA,EACRC,IACAE,KAAKF,MAAQT,EAAUY,EAAE,QAAS,SAASC,IAAI,WAAaH,OAAiBI,KAAKL,IAEtFE,KAAKI,IAAMf,EAAUY,EAAE,MAAO,OAAOI,MAAM,OAAOC,OAClDN,KAAKJ,MAAQA,EACbI,KAAKJ,MAAMW,QAAU,KAAMP,KAAKQ,YAChCR,KAAKS,GAAKpB,EAAUY,EAAE,SAAWX,EAASoB,wBAAyBC,SAASX,KAAKF,MAAOF,EAAMa,GAAIT,KAAKI,KAE3GT,SACI,MAAkC,SAA3BK,KAAKS,GAAGP,IAAI,WAEvBP,OACIK,KAAKS,GAAGG,OAEZjB,OAEI,OADAK,KAAKS,GAAGH,OACDN,KAEXL,IAAIkB,GACA,OAAOb,KAAKJ,MAAMkB,IAAID,GAE1BlB,KAAKoB,GACDf,KAAKJ,MAAMmB,KAAKA,GAEpBpB,WACI,MAAMC,MAACA,EAAKC,KAAEA,EAAIO,IAAEA,EAAGK,GAAEA,GAAMT,KACzBa,EAAIjB,EAAMkB,MAChB,GAAIjB,EAAKmB,UACD,QAAQC,KAAKJ,GAGb,OAFAT,EAAID,KAAKZ,EAAS2B,EAAE,wBACpBT,EAAGU,SAAS,UACL,EAGf,GAAItB,EAAKuB,MAAQvB,EAAKwB,QAAS,CAE3B,KADgBxB,EAAKwB,SAAW7B,EAASK,EAAKuB,OACjCH,KAAKJ,GAGd,OAFAT,EAAID,KAAKZ,EAAS2B,EAAE,wBACpBT,EAAGU,SAAS,UACL,EAIf,OADAV,EAAGa,YAAY,UACR","file":"../../component/form_field.js","sourcesContent":["define([\n    './element',\n    '../config',\n    '../locale/locale'\n], function (m_element, m_config, m_locale) {\n    'use strict';\n    const patterns = {\n        number: /(^\\d+$)|(^\\d+(\\.\\d{0,4})?$)/,\n        date: /^\\d{4}-\\d{1,2}-\\d{1,2}$/\n    };\n    return class FormField {\n        constructor(input, rule, label, labelWidth) {\n            this.label = '';\n            this.rule = rule;\n            if (label) {\n                this.label = m_element.h('label', 'label').css('width', `${ labelWidth }px`).html(label);\n            }\n            this.tip = m_element.h('div', 'tip').child('tip').hide();\n            this.input = input;\n            this.input.vchange = () => this.validate();\n            this.el = m_element.h('div', `${ m_config.cssPrefix }-form-field`).children(this.label, input.el, this.tip);\n        }\n        isShow() {\n            return this.el.css('display') !== 'none';\n        }\n        show() {\n            this.el.show();\n        }\n        hide() {\n            this.el.hide();\n            return this;\n        }\n        val(v) {\n            return this.input.val(v);\n        }\n        hint(hint) {\n            this.input.hint(hint);\n        }\n        validate() {\n            const {input, rule, tip, el} = this;\n            const v = input.val();\n            if (rule.required) {\n                if (/^\\s*$/.test(v)) {\n                    tip.html(m_locale.t('validation.required'));\n                    el.addClass('error');\n                    return false;\n                }\n            }\n            if (rule.type || rule.pattern) {\n                const pattern = rule.pattern || patterns[rule.type];\n                if (!pattern.test(v)) {\n                    tip.html(m_locale.t('validation.notMatch'));\n                    el.addClass('error');\n                    return false;\n                }\n            }\n            el.removeClass('error');\n            return true;\n        }\n    };\n});"]}