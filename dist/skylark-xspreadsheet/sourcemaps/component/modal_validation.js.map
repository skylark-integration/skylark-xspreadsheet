{"version":3,"sources":["component/modal_validation.js"],"names":["define","Modal","FormInput","FormSelect","FormField","Button","m_locale","m_element","m_config","[object Object]","mf","it","t","required","rf","pattern","cf","this","criteriaSelected","of","criteriaOperatorSelected","hide","minvf","maxvf","type","svf","vf","super","h","cssPrefix","children","el","on","btnClick","change","hint","input","show","rule","val","action","attrs","i","length","field","isShow","validate","mode","ref","operator","value","v","validator","Array","isArray"],"mappings":"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","file":"../../component/modal_validation.js","sourcesContent":["define([\n    './modal',\n    './form_input',\n    './form_select',\n    './form_field',\n    './button',\n    '../locale/locale',\n    './element',\n    '../config'\n], function (Modal, FormInput, FormSelect, FormField, Button, m_locale, m_element, m_config) {\n    'use strict';\n    const fieldLabelWidth = 100;\n    return class ModalValidation extends Modal {\n        constructor() {\n            const mf = new FormField(new FormSelect('cell', ['cell'], '100%', it => m_locale.t(`dataValidation.modeType.${ it }`)), { required: true }, `${ m_locale.t('dataValidation.range') }:`, fieldLabelWidth);\n            const rf = new FormField(new FormInput('120px', 'E3 or E3:F12'), {\n                required: true,\n                pattern: /^([A-Z]{1,2}[1-9]\\d*)(:[A-Z]{1,2}[1-9]\\d*)?$/\n            });\n            const cf = new FormField(new FormSelect('list', [\n                'list',\n                'number',\n                'date',\n                'phone',\n                'email'\n            ], '100%', it => m_locale.t(`dataValidation.type.${ it }`), it => this.criteriaSelected(it)), { required: true }, `${ m_locale.t('dataValidation.criteria') }:`, fieldLabelWidth);\n            const of = new FormField(new FormSelect('be', [\n                'be',\n                'nbe',\n                'eq',\n                'neq',\n                'lt',\n                'lte',\n                'gt',\n                'gte'\n            ], '160px', it => m_locale.t(`dataValidation.operator.${ it }`), it => this.criteriaOperatorSelected(it)), { required: true }).hide();\n            const minvf = new FormField(new FormInput('70px', '10'), { required: true }).hide();\n            const maxvf = new FormField(new FormInput('70px', '100'), {\n                required: true,\n                type: 'number'\n            }).hide();\n            const svf = new FormField(new FormInput('120px', 'a,b,m_config'), { required: true });\n            const vf = new FormField(new FormInput('70px', '10'), {\n                required: true,\n                type: 'number'\n            }).hide();\n            super(m_locale.t('contextmenu.validation'), [\n                m_element.h('div', `${ m_config.cssPrefix }-form-fields`).children(mf.el, rf.el),\n                m_element.h('div', `${ m_config.cssPrefix }-form-fields`).children(cf.el, of.el, minvf.el, maxvf.el, vf.el, svf.el),\n                m_element.h('div', `${ m_config.cssPrefix }-buttons`).children(new Button('cancel').on('click', () => this.btnClick('cancel')), new Button('remove').on('click', () => this.btnClick('remove')), new Button('save', 'primary').on('click', () => this.btnClick('save')))\n            ]);\n            this.mf = mf;\n            this.rf = rf;\n            this.cf = cf;\n            this.of = of;\n            this.minvf = minvf;\n            this.maxvf = maxvf;\n            this.vf = vf;\n            this.svf = svf;\n            this.change = () => {\n            };\n        }\n        showVf(it) {\n            const hint = it === 'date' ? '2018-11-12' : '10';\n            const {vf} = this;\n            vf.input.hint(hint);\n            vf.show();\n        }\n        criteriaSelected(it) {\n            const {of, minvf, maxvf, vf, svf} = this;\n            if (it === 'date' || it === 'number') {\n                of.show();\n                minvf.rule.type = it;\n                maxvf.rule.type = it;\n                if (it === 'date') {\n                    minvf.hint('2018-11-12');\n                    maxvf.hint('2019-11-12');\n                } else {\n                    minvf.hint('10');\n                    maxvf.hint('100');\n                }\n                minvf.show();\n                maxvf.show();\n                vf.hide();\n                svf.hide();\n            } else {\n                if (it === 'list') {\n                    svf.show();\n                } else {\n                    svf.hide();\n                }\n                vf.hide();\n                of.hide();\n                minvf.hide();\n                maxvf.hide();\n            }\n        }\n        criteriaOperatorSelected(it) {\n            if (!it)\n                return;\n            const {minvf, maxvf, vf} = this;\n            if (it === 'be' || it === 'nbe') {\n                minvf.show();\n                maxvf.show();\n                vf.hide();\n            } else {\n                const type = this.cf.val();\n                vf.rule.type = type;\n                if (type === 'date') {\n                    vf.hint('2018-11-12');\n                } else {\n                    vf.hint('10');\n                }\n                vf.show();\n                minvf.hide();\n                maxvf.hide();\n            }\n        }\n        btnClick(action) {\n            if (action === 'cancel') {\n                this.hide();\n            } else if (action === 'remove') {\n                this.change('remove');\n                this.hide();\n            } else if (action === 'save') {\n                const attrs = [\n                    'mf',\n                    'rf',\n                    'cf',\n                    'of',\n                    'svf',\n                    'vf',\n                    'minvf',\n                    'maxvf'\n                ];\n                for (let i = 0; i < attrs.length; i += 1) {\n                    const field = this[attrs[i]];\n                    if (field.isShow()) {\n                        if (!field.validate())\n                            return;\n                    }\n                }\n                const mode = this.mf.val();\n                const ref = this.rf.val();\n                const type = this.cf.val();\n                const operator = this.of.val();\n                let value = this.svf.val();\n                if (type === 'number' || type === 'date') {\n                    if (operator === 'be' || operator === 'nbe') {\n                        value = [\n                            this.minvf.val(),\n                            this.maxvf.val()\n                        ];\n                    } else {\n                        value = this.vf.val();\n                    }\n                }\n                this.change('save', mode, ref, {\n                    type,\n                    operator,\n                    required: false,\n                    value\n                });\n                this.hide();\n            }\n        }\n        setValue(v) {\n            if (v) {\n                const {mf, rf, cf, of, svf, vf, minvf, maxvf} = this;\n                const {mode, ref, validator} = v;\n                const {type, operator, value} = validator || { type: 'list' };\n                mf.val(mode || 'cell');\n                rf.val(ref);\n                cf.val(type);\n                of.val(operator);\n                if (Array.isArray(value)) {\n                    minvf.val(value[0]);\n                    maxvf.val(value[1]);\n                } else {\n                    svf.val(value || '');\n                    vf.val(value || '');\n                }\n                this.criteriaSelected(type);\n                this.criteriaOperatorSelected(operator);\n            }\n            this.show();\n        }\n    };\n});"]}