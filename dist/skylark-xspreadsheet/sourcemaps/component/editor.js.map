{"version":3,"sources":["component/editor.js"],"names":["define","m_element","Suggest","Datepicker","m_config","resetTextareaSize","inputText","this","test","textlineEl","textEl","areaOffset","txts","split","maxTxtSize","Math","max","map","it","length","fontWidth","offset","width","tlineWidth","maxWidth","viewFn","left","h1","twidth","parseInt","css","rowHeight","height","keydownEventHandler","evt","keyCode","altKey","stopPropagation","target","itxt","value","selectionEnd","ntxt","slice","setSelectionRange","html","call","preventDefault","setText","text","position","el","blur","val","setTimeout","focus","[object Object]","formulas","suggest","validator","type","start","lastIndexOf","sit","substring","eit","indexOf","key","datepicker","change","d","month","getMonth","date","getDate","getFullYear","dateFormat","clear","areaEl","h","cssPrefix","children","on","v","cell","editable","undefined","search","hide","child","bindInputEvents","freeze","w","setItems","suggestPosition","top","l","t","elOffset","sOffset","setOffset","show","setValue","values"],"mappings":"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","file":"../../component/editor.js","sourcesContent":["define([\n    './element',\n    './suggest',\n    './datepicker',\n    '../config'\n], function (m_element, Suggest, Datepicker, m_config) {\n    'use strict';\n    function resetTextareaSize() {\n        const {inputText} = this;\n        if (!/^\\s*$/.test(inputText)) {\n            const {textlineEl, textEl, areaOffset} = this;\n            const txts = inputText.split('\\n');\n            const maxTxtSize = Math.max(...txts.map(it => it.length));\n            const tlOffset = textlineEl.offset();\n            const fontWidth = tlOffset.width / inputText.length;\n            const tlineWidth = (maxTxtSize + 1) * fontWidth + 5;\n            const maxWidth = this.viewFn().width - areaOffset.left - fontWidth;\n            let h1 = txts.length;\n            if (tlineWidth > areaOffset.width) {\n                let twidth = tlineWidth;\n                if (tlineWidth > maxWidth) {\n                    twidth = maxWidth;\n                    h1 += parseInt(tlineWidth / maxWidth, 10);\n                    h1 += tlineWidth % maxWidth > 0 ? 1 : 0;\n                }\n                textEl.css('width', `${ twidth }px`);\n            }\n            h1 *= this.rowHeight;\n            if (h1 > areaOffset.height) {\n                textEl.css('height', `${ h1 }px`);\n            }\n        }\n    }\n    function insertText({target}, itxt) {\n        const {value, selectionEnd} = target;\n        const ntxt = `${ value.slice(0, selectionEnd) }${ itxt }${ value.slice(selectionEnd) }`;\n        target.value = ntxt;\n        target.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n        this.inputText = ntxt;\n        this.textlineEl.html(ntxt);\n        resetTextareaSize.call(this);\n    }\n    function keydownEventHandler(evt) {\n        const {keyCode, altKey} = evt;\n        if (keyCode !== 13 && keyCode !== 9)\n            evt.stopPropagation();\n        if (keyCode === 13 && altKey) {\n            insertText.call(this, evt, '\\n');\n            evt.stopPropagation();\n        }\n        if (keyCode === 13 && !altKey)\n            evt.preventDefault();\n    }\n    function inputEventHandler(evt) {\n        const v = evt.target.value;\n        const {suggest, textlineEl, validator} = this;\n        const {cell} = this;\n        if (cell !== null) {\n            if ('editable' in cell && cell.editable === true || cell.editable === undefined) {\n                this.inputText = v;\n                if (validator) {\n                    if (validator.type === 'list') {\n                        suggest.search(v);\n                    } else {\n                        suggest.hide();\n                    }\n                } else {\n                    const start = v.lastIndexOf('=');\n                    if (start !== -1) {\n                        suggest.search(v.substring(start + 1));\n                    } else {\n                        suggest.hide();\n                    }\n                }\n                textlineEl.html(v);\n                resetTextareaSize.call(this);\n                this.change('input', v);\n            } else {\n                evt.target.value = '';\n            }\n        } else {\n            this.inputText = v;\n            if (validator) {\n                if (validator.type === 'list') {\n                    suggest.search(v);\n                } else {\n                    suggest.hide();\n                }\n            } else {\n                const start = v.lastIndexOf('=');\n                if (start !== -1) {\n                    suggest.search(v.substring(start + 1));\n                } else {\n                    suggest.hide();\n                }\n            }\n            textlineEl.html(v);\n            resetTextareaSize.call(this);\n            this.change('input', v);\n        }\n    }\n    function setTextareaRange(position) {\n        const {el} = this.textEl;\n        setTimeout(() => {\n            el.focus();\n            el.setSelectionRange(position, position);\n        }, 0);\n    }\n    function setText(text, position) {\n        const {textEl, textlineEl} = this;\n        textEl.el.blur();\n        textEl.val(text);\n        textlineEl.html(text);\n        setTextareaRange.call(this, position);\n    }\n    function suggestItemClick(it) {\n        const {inputText, validator} = this;\n        let position = 0;\n        if (validator && validator.type === 'list') {\n            this.inputText = it;\n            position = this.inputText.length;\n        } else {\n            const start = inputText.lastIndexOf('=');\n            const sit = inputText.substring(0, start + 1);\n            let eit = inputText.substring(start + 1);\n            if (eit.indexOf(')') !== -1) {\n                eit = eit.substring(eit.indexOf(')'));\n            } else {\n                eit = '';\n            }\n            this.inputText = `${ sit + it.key }(`;\n            position = this.inputText.length;\n            this.inputText += `)${ eit }`;\n        }\n        setText.call(this, this.inputText, position);\n    }\n    function resetSuggestItems() {\n        this.suggest.setItems(this.formulas);\n    }\n    function dateFormat(d) {\n        let month = d.getMonth() + 1;\n        let date = d.getDate();\n        if (month < 10)\n            month = `0${ month }`;\n        if (date < 10)\n            date = `0${ date }`;\n        return `${ d.getFullYear() }-${ month }-${ date }`;\n    }\n    return class Editor {\n        constructor(formulas, viewFn, rowHeight) {\n            this.viewFn = viewFn;\n            this.rowHeight = rowHeight;\n            this.formulas = formulas;\n            this.suggest = new Suggest(formulas, it => {\n                suggestItemClick.call(this, it);\n            });\n            this.datepicker = new Datepicker();\n            this.datepicker.change(d => {\n                this.setText(dateFormat(d));\n                this.clear();\n            });\n            this.areaEl = m_element.h('div', `${ m_config.cssPrefix }-editor-area`).children(this.textEl = m_element.h('textarea', '').on('input', evt => inputEventHandler.call(this, evt)).on('paste.stop', () => {\n            }).on('keydown', evt => keydownEventHandler.call(this, evt)), this.textlineEl = m_element.h('div', 'textline'), this.suggest.el, this.datepicker.el).on('mousemove.stop', () => {\n            }).on('mousedown.stop', () => {\n            });\n            this.el = m_element.h('div', `${ m_config.cssPrefix }-editor`).child(this.areaEl).hide();\n            this.suggest.bindInputEvents(this.textEl);\n            this.areaOffset = null;\n            this.freeze = {\n                w: 0,\n                h: 0\n            };\n            this.cell = null;\n            this.inputText = '';\n            this.change = () => {\n            };\n        }\n        setFreezeLengths(width, height) {\n            this.freeze.w = width;\n            this.freeze.undefined = height;\n        }\n        clear() {\n            if (this.inputText !== '') {\n                this.change('finished', this.inputText);\n            }\n            this.cell = null;\n            this.areaOffset = null;\n            this.inputText = '';\n            this.el.hide();\n            this.textEl.val('');\n            this.textlineEl.html('');\n            resetSuggestItems.call(this);\n            this.datepicker.hide();\n        }\n        setOffset(offset, suggestPosition = 'top') {\n            const {textEl, areaEl, suggest, freeze, el} = this;\n            if (offset) {\n                this.areaOffset = offset;\n                const {left, top, width, height, l, t} = offset;\n                const elOffset = {\n                    left: 0,\n                    top: 0\n                };\n                if (freeze.w > l && freeze.undefined > t) {\n                } else if (freeze.w < l && freeze.undefined < t) {\n                    elOffset.left = freeze.w;\n                    elOffset.top = freeze.undefined;\n                } else if (freeze.w > l) {\n                    elOffset.top = freeze.undefined;\n                } else if (freeze.undefined > t) {\n                    elOffset.left = freeze.w;\n                }\n                el.offset(elOffset);\n                areaEl.offset({\n                    left: left - elOffset.left - 0.8,\n                    top: top - elOffset.top - 0.8\n                });\n                textEl.offset({\n                    width: width - 9 + 0.8,\n                    height: height - 3 + 0.8\n                });\n                const sOffset = { left: 0 };\n                sOffset[suggestPosition] = height;\n                suggest.setOffset(sOffset);\n                suggest.hide();\n            }\n        }\n        setCell(cell, validator) {\n            const {el, datepicker, suggest} = this;\n            el.show();\n            this.cell = cell;\n            const text = cell && cell.text || '';\n            this.setText(text);\n            this.validator = validator;\n            if (validator) {\n                const {type} = validator;\n                if (type === 'date') {\n                    datepicker.show();\n                    if (!/^\\s*$/.test(text)) {\n                        datepicker.setValue(text);\n                    }\n                }\n                if (type === 'list') {\n                    suggest.setItems(validator.values());\n                    suggest.search('');\n                }\n            }\n        }\n        setText(text) {\n            this.inputText = text;\n            setText.call(this, text, text.length);\n            resetTextareaSize.call(this);\n        }\n    };\n});"]}