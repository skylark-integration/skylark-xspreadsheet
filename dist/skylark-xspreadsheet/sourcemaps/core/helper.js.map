{"version":3,"sources":["core/helper.js"],"names":["define","mergeDeep","object","sources","forEach","source","Object","keys","key","v","Array","isArray","digits","a","ret","flag","i","length","charAt","cloneDeep","obj","JSON","parse","stringify","merge","equals","obj1","obj2","k","v1","v2","undefined","ai","arrayEquals","a1","a2","sum","objOrAry","cb","value","total","size","rangeEach","min","max","rangeSum","getv","s","rangeReduceIf","inits","initv","ifv","deleteProperty","property","oldv","numberCalc","type","Number","isNaN","al1","al2","num1","num2","toFixed","Math"],"mappings":"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","file":"../../core/helper.js","sourcesContent":["define(function () {\n    'use strict';\n    function cloneDeep(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    const mergeDeep = (object = {}, ...sources) => {\n        sources.forEach(source => {\n            Object.keys(source).forEach(key => {\n                const v = source[key];\n                if (typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean') {\n                    object[key] = v;\n                } else if (typeof v !== 'function' && !Array.isArray(v) && v instanceof Object) {\n                    object[key] = object[key] || {};\n                    mergeDeep(object[key], v);\n                } else {\n                    object[key] = v;\n                }\n            });\n        });\n        return object;\n    };\n    function equals(obj1, obj2) {\n        const keys = Object.keys(obj1);\n        if (keys.length !== Object.keys(obj2).length)\n            return false;\n        for (let i = 0; i < keys.length; i += 1) {\n            const k = keys[i];\n            const v1 = obj1[k];\n            const v2 = obj2[k];\n            if (v2 === undefined)\n                return false;\n            if (typeof v1 === 'string' || typeof v1 === 'number' || typeof v1 === 'boolean') {\n                if (v1 !== v2)\n                    return false;\n            } else if (Array.isArray(v1)) {\n                if (v1.length !== v2.length)\n                    return false;\n                for (let ai = 0; ai < v1.length; ai += 1) {\n                    if (!equals(v1[ai], v2[ai]))\n                        return false;\n                }\n            } else if (typeof v1 !== 'function' && !Array.isArray(v1) && v1 instanceof Object) {\n                if (!equals(v1, v2))\n                    return false;\n            }\n        }\n        return true;\n    }\n    const sum = (objOrAry, cb = value => value) => {\n        let total = 0;\n        let size = 0;\n        Object.keys(objOrAry).forEach(key => {\n            total += cb(objOrAry[key], key);\n            size += 1;\n        });\n        return [\n            total,\n            size\n        ];\n    };\n    function deleteProperty(obj, property) {\n        const oldv = obj[`${ property }`];\n        delete obj[`${ property }`];\n        return oldv;\n    }\n    function rangeReduceIf(min, max, inits, initv, ifv, getv) {\n        let s = inits;\n        let v = initv;\n        let i = min;\n        for (; i < max; i += 1) {\n            if (s > ifv)\n                break;\n            v = getv(i);\n            s += v;\n        }\n        return [\n            i,\n            s - v,\n            v\n        ];\n    }\n    function rangeSum(min, max, getv) {\n        let s = 0;\n        for (let i = min; i < max; i += 1) {\n            s += getv(i);\n        }\n        return s;\n    }\n    function rangeEach(min, max, cb) {\n        for (let i = min; i < max; i += 1) {\n            cb(i);\n        }\n    }\n    function arrayEquals(a1, a2) {\n        if (a1.length === a2.length) {\n            for (let i = 0; i < a1.length; i += 1) {\n                if (a1[i] !== a2[i])\n                    return false;\n            }\n        } else\n            return false;\n        return true;\n    }\n    function digits(a) {\n        const v = `${ a }`;\n        let ret = 0;\n        let flag = false;\n        for (let i = 0; i < v.length; i += 1) {\n            if (flag === true)\n                ret += 1;\n            if (v.charAt(i) === '.')\n                flag = true;\n        }\n        return ret;\n    }\n    function numberCalc(type, a1, a2) {\n        if (Number.isNaN(a1) || Number.isNaN(a2)) {\n            return a1 + type + a2;\n        }\n        const al1 = digits(a1);\n        const al2 = digits(a2);\n        const num1 = Number(a1);\n        const num2 = Number(a2);\n        let ret = 0;\n        if (type === '-') {\n            ret = num1 - num2;\n        } else if (type === '+') {\n            ret = num1 + num2;\n        } else if (type === '*') {\n            ret = num1 * num2;\n        } else if (type === '/') {\n            ret = num1 / num2;\n            if (digits(ret) > 5)\n                return ret.toFixed(2);\n            return ret;\n        }\n        return ret.toFixed(Math.max(al1, al2));\n    }\n    return {\n        cloneDeep,\n        merge: (...sources) => mergeDeep({}, ...sources),\n        equals,\n        arrayEquals,\n        sum,\n        rangeEach,\n        rangeSum,\n        rangeReduceIf,\n        deleteProperty,\n        numberCalc\n    };\n});"]}