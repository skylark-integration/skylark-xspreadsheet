{"version":3,"sources":["core/auto_filter.js"],"names":["define","m_cell_range","Filter","[object Object]","ci","operator","value","this","v","includes","length","Sort","order","ref","filters","sort","fitlers","map","it","active","getData","filter","getFilter","push","set","ri","hrange","i","getCell","rset","Set","fset","sri","eri","range","cell","ctext","text","add","m","test","key","cnt","CellRange","valueOf","r"],"mappings":"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","file":"../../core/auto_filter.js","sourcesContent":["define([\n    './cell_range'\n], function (m_cell_range) {\n    'use strict';\n\n// operator: all|eq|neq|gt|gte|lt|lte|in|be\n// value:\n//   in => []\n//   be => [min, max]\n    class Filter {\n        constructor(ci, operator, value) {\n            this.ci = ci;\n            this.operator = operator;\n            this.value = value;\n        }\n        set(operator, value) {\n            this.operator = operator;\n            this.value = value;\n        }\n        includes(v) {\n            const {operator, value} = this;\n            if (operator === 'all') {\n                return true;\n            }\n            if (operator === 'in') {\n                return value.includes(v);\n            }\n            return false;\n        }\n        vlength() {\n            const {operator, value} = this;\n            if (operator === 'in') {\n                return value.length;\n            }\n            return 0;\n        }\n        getData() {\n            const {ci, operator, value} = this;\n            return {\n                ci,\n                operator,\n                value\n            };\n        }\n    }\n    class Sort {\n        constructor(ci, order) {\n            this.ci = ci;\n            this.order = order;\n        }\n        asc() {\n            return this.order === 'asc';\n        }\n        desc() {\n            return this.order === 'desc';\n        }\n    }\n    class AutoFilter {\n        constructor() {\n            this.ref = null;\n            this.filters = [];\n            this.sort = null;\n        }\n        setData({ref, filters, sort}) {\n            if (ref != null) {\n                this.ref = ref;\n                this.fitlers = filters.map(it => new Filter(it.ci, it.operator, it.value));\n                if (sort) {\n                    this.sort = new Sort(sort.ci, sort.order);\n                }\n            }\n        }\n        getData() {\n            if (this.active()) {\n                const {ref, filters, sort} = this;\n                return {\n                    ref,\n                    filters: filters.map(it => it.getData()),\n                    sort\n                };\n            }\n            return {};\n        }\n        addFilter(ci, operator, value) {\n            const filter = this.getFilter(ci);\n            if (filter == null) {\n                this.filters.push(new Filter(ci, operator, value));\n            } else {\n                filter.set(operator, value);\n            }\n        }\n        setSort(ci, order) {\n            this.sort = order ? new Sort(ci, order) : null;\n        }\n        includes(ri, ci) {\n            if (this.active()) {\n                return this.hrange().includes(ri, ci);\n            }\n            return false;\n        }\n        getSort(ci) {\n            const {sort} = this;\n            if (sort && sort.ci === ci) {\n                return sort;\n            }\n            return null;\n        }\n        getFilter(ci) {\n            const {filters} = this;\n            for (let i = 0; i < filters.length; i += 1) {\n                if (filters[i].ci === ci) {\n                    return filters[i];\n                }\n            }\n            return null;\n        }\n        filteredRows(getCell) {\n            const rset = new Set();\n            const fset = new Set();\n            if (this.active()) {\n                const {sri, eri} = this.range();\n                const {filters} = this;\n                for (let ri = sri + 1; ri <= eri; ri += 1) {\n                    for (let i = 0; i < filters.length; i += 1) {\n                        const filter = filters[i];\n                        const cell = getCell(ri, filter.ci);\n                        const ctext = cell ? cell.text : '';\n                        if (!filter.includes(ctext)) {\n                            rset.add(ri);\n                            break;\n                        } else {\n                            fset.add(ri);\n                        }\n                    }\n                }\n            }\n            return {\n                rset,\n                fset\n            };\n        }\n        items(ci, getCell) {\n            const m = {};\n            if (this.active()) {\n                const {sri, eri} = this.range();\n                for (let ri = sri + 1; ri <= eri; ri += 1) {\n                    const cell = getCell(ri, ci);\n                    if (cell !== null && !/^\\s*$/.test(cell.text)) {\n                        const key = cell.text;\n                        const cnt = (m[key] || 0) + 1;\n                        m[key] = cnt;\n                    } else {\n                        m[''] = (m[''] || 0) + 1;\n                    }\n                }\n            }\n            return m;\n        }\n        range() {\n            return m_cell_range.CellRange.valueOf(this.ref);\n        }\n        hrange() {\n            const r = this.range();\n            r.eri = r.sri;\n            return r;\n        }\n        clear() {\n            this.ref = null;\n            this.filters = [];\n            this.sort = null;\n        }\n        active() {\n            return this.ref !== null;\n        }\n    };\n\n    return AutoFilter;\n});"]}