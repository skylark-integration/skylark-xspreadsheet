{"version":3,"sources":["core/formula.js"],"names":["define","m_locale","m_helper","baseFormulas","key","title","tf","render","ary","reduce","a","b","numberCalc","Number","length","Math","max","map","v","min","t","f","every","it","some","join","formulas","formulam","forEach"],"mappings":";;;;;;;AAAAA,QACI,mBACA,YACD,SAAUC,EAAUC,GACnB,aACA,MAAMC,IAEEC,IAAK,MACLC,MAAOJ,EAASK,GAAG,eACnBC,OAAQC,GAAOA,EAAIC,OAAO,CAACC,EAAGC,IAAMT,EAASU,WAAW,IAAKF,EAAGC,GAAI,KAGpEP,IAAK,UACLC,MAAOJ,EAASK,GAAG,mBACnBC,OAAQC,GAAOA,EAAIC,OAAO,CAACC,EAAGC,IAAME,OAAOH,GAAKG,OAAOF,GAAI,GAAKH,EAAIM,SAGpEV,IAAK,MACLC,MAAOJ,EAASK,GAAG,eACnBC,OAAQC,GAAOO,KAAKC,OAAOR,EAAIS,IAAIC,GAAKL,OAAOK,OAG/Cd,IAAK,MACLC,MAAOJ,EAASK,GAAG,eACnBC,OAAQC,GAAOO,KAAKI,OAAOX,EAAIS,IAAIC,GAAKL,OAAOK,OAG/Cd,IAAK,KACLC,MAAOJ,EAASK,GAAG,eACnBC,OAAQ,EAAEI,EAAGS,EAAGC,KAAOV,EAAIS,EAAIC,IAG/BjB,IAAK,MACLC,MAAOJ,EAASK,GAAG,eACnBC,OAAQC,GAAOA,EAAIc,MAAMC,GAAMA,KAG/BnB,IAAK,KACLC,MAAOJ,EAASK,GAAG,cACnBC,OAAQC,GAAOA,EAAIgB,KAAKD,GAAMA,KAG9BnB,IAAK,SACLC,MAAOJ,EAASK,GAAG,kBACnBC,OAAQC,GAAOA,EAAIiB,KAAK,MAG1BC,EAAWvB,EACXwB,KAKN,OAJAxB,EAAayB,QAAQP,IACjBM,EAASN,EAAEjB,KAAOiB,KAIlBM,SAAAA,EACAD,SAAAA,EACAvB,aAAAA","file":"../../core/formula.js","sourcesContent":["define([\n    '../locale/locale',\n    './helper'\n], function (m_locale, m_helper) {\n    'use strict';\n    const baseFormulas = [\n        {\n            key: 'SUM',\n            title: m_locale.tf('formula.sum'),\n            render: ary => ary.reduce((a, b) => m_helper.numberCalc('+', a, b), 0)\n        },\n        {\n            key: 'AVERAGE',\n            title: m_locale.tf('formula.average'),\n            render: ary => ary.reduce((a, b) => Number(a) + Number(b), 0) / ary.length\n        },\n        {\n            key: 'MAX',\n            title: m_locale.tf('formula.max'),\n            render: ary => Math.max(...ary.map(v => Number(v)))\n        },\n        {\n            key: 'MIN',\n            title: m_locale.tf('formula.min'),\n            render: ary => Math.min(...ary.map(v => Number(v)))\n        },\n        {\n            key: 'IF',\n            title: m_locale.tf('formula._if'),\n            render: ([b, t, f]) => b ? t : f\n        },\n        {\n            key: 'AND',\n            title: m_locale.tf('formula.and'),\n            render: ary => ary.every(it => it)\n        },\n        {\n            key: 'OR',\n            title: m_locale.tf('formula.or'),\n            render: ary => ary.some(it => it)\n        },\n        {\n            key: 'CONCAT',\n            title: m_locale.tf('formula.concat'),\n            render: ary => ary.join('')\n        }\n    ];\n    const formulas = baseFormulas;\n    const formulam = {};\n    baseFormulas.forEach(f => {\n        formulam[f.key] = f;\n    });\n    \n    return  {\n        formulam,\n        formulas,\n        baseFormulas\n    };\n});"]}