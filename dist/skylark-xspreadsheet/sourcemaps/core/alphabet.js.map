{"version":3,"sources":["core/alphabet.js"],"names":["define","alphabets","stringAt","index","str","cindex","length","parseInt","last","indexAt","ret","i","charCodeAt","exponet","expr2xy","src","x","y","charAt","xy2expr","expr2expr","xn","yn","condition"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aACA,MAAMC,GACF,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAUJ,SAASC,EAASC,GACd,IAAIC,EAAM,GACNC,EAASF,EACb,KAAOE,GAAUJ,EAAUK,QACvBD,GAAUJ,EAAUK,OACpBD,GAAU,EACVD,GAAOH,EAAUM,SAASF,EAAQ,IAAMJ,EAAUK,QAEtD,MAAME,EAAOL,EAAQF,EAAUK,OAE/B,OADAF,GAAOH,EAAUO,GAUrB,SAASC,EAAQL,GACb,IAAIM,EAAM,EACV,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAIE,OAAS,EAAGK,GAAK,EAAG,CACxC,MAAMN,EAASD,EAAIQ,WAAWD,GAAK,GAC7BE,EAAUT,EAAIE,OAAS,EAAIK,EACjCD,GAAOT,EAAUK,QAAUO,EAAUZ,EAAUK,OAASD,EAG5D,OADAK,GAAON,EAAIQ,WAAWR,EAAIE,OAAS,GAAK,GAY5C,SAASQ,EAAQC,GACb,IAAIC,EAAI,GACJC,EAAI,GACR,IAAK,IAAIN,EAAI,EAAGA,EAAII,EAAIT,OAAQK,GAAK,EAC7BI,EAAIG,OAAOP,IAAM,KAAOI,EAAIG,OAAOP,IAAM,IACzCM,GAAKF,EAAIG,OAAOP,GAEhBK,GAAKD,EAAIG,OAAOP,GAGxB,OACIF,EAAQO,GACRT,SAASU,EAAG,IAAM,GAY1B,SAASE,EAAQH,EAAGC,GAChB,SAAWf,EAASc,KAAOC,EAAI,IAmBnC,OACIf,SAAAA,EACAO,QAAAA,EACAK,QAAAA,EACAK,QAAAA,EACAC,UAbJ,SAAmBL,EAAKM,EAAIC,EAAIC,EAAY,MAAM,IAC9C,GAAW,IAAPF,GAAmB,IAAPC,EACZ,OAAOP,EACX,MAAOC,EAAGC,GAAKH,EAAQC,GACvB,OAAKQ,EAAUP,EAAGC,GAEXE,EAAQH,EAAIK,EAAIJ,EAAIK,GADhBP","file":"../../core/alphabet.js","sourcesContent":["define(function () {\n    'use strict';\n    const alphabets = [\n        'A',\n        'B',\n        'C',\n        'D',\n        'E',\n        'F',\n        'G',\n        'H',\n        'I',\n        'J',\n        'K',\n        'L',\n        'M',\n        'N',\n        'O',\n        'P',\n        'Q',\n        'R',\n        'S',\n        'T',\n        'U',\n        'V',\n        'W',\n        'X',\n        'Y',\n        'Z'\n    ];\n\n    /** index number 2 letters\n     * @example stringAt(26) ==> 'AA'\n     * @date 2019-10-10\n     * @export\n     * @param {number} index\n     * @returns {string}\n     */\n    function stringAt(index) {\n        let str = '';\n        let cindex = index;\n        while (cindex >= alphabets.length) {\n            cindex /= alphabets.length;\n            cindex -= 1;\n            str += alphabets[parseInt(cindex, 10) % alphabets.length];\n        }\n        const last = index % alphabets.length;\n        str += alphabets[last];\n        return str;\n    }\n\n    /** translate letter in A1-tag to number\n     * @date 2019-10-10\n     * @export\n     * @param {string} str \"AA\" in A1-tag \"AA1\"\n     * @returns {number}\n     */\n    function indexAt(str) {\n        let ret = 0;\n        for (let i = 0; i < str.length - 1; i += 1) {\n            const cindex = str.charCodeAt(i) - 65;\n            const exponet = str.length - 1 - i;\n            ret += alphabets.length ** exponet + alphabets.length * cindex;\n        }\n        ret += str.charCodeAt(str.length - 1) - 65;\n        return ret;\n    }\n\n\n    // B10 => x,y\n    /** translate A1-tag to XY-tag\n     * @date 2019-10-10\n     * @export\n     * @param {tagA1} src\n     * @returns {tagXY}\n     */\n    function expr2xy(src) {\n        let x = '';\n        let y = '';\n        for (let i = 0; i < src.length; i += 1) {\n            if (src.charAt(i) >= '0' && src.charAt(i) <= '9') {\n                y += src.charAt(i);\n            } else {\n                x += src.charAt(i);\n            }\n        }\n        return [\n            indexAt(x),\n            parseInt(y, 10) - 1\n        ];\n    }\n\n/** translate XY-tag to A1-tag\n * @example x,y => B10\n * @date 2019-10-10\n * @export\n * @param {number} x\n * @param {number} y\n * @returns {tagA1}\n */\n    function xy2expr(x, y) {\n        return `${ stringAt(x) }${ y + 1 }`;\n    }\n\n/** translate A1-tag src by (xn, yn)\n * @date 2019-10-10\n * @export\n * @param {tagA1} src\n * @param {number} xn\n * @param {number} yn\n * @returns {tagA1}\n */\n    function expr2expr(src, xn, yn, condition = () => true) {\n        if (xn === 0 && yn === 0)\n            return src;\n        const [x, y] = expr2xy(src);\n        if (!condition(x, y))\n            return src;\n        return xy2expr(x + xn, y + yn);\n    }\n    return {\n        stringAt,\n        indexAt,\n        expr2xy,\n        xy2expr,\n        expr2expr\n    };\n});"]}