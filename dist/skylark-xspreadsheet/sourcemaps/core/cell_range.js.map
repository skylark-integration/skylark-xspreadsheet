{"version":3,"sources":["core/cell_range.js"],"names":["define","m_alphabet","CellRange","[object Object]","sri","sci","eri","eci","w","h","this","args","ri","ci","length","expr2xy","cb","rowFilter","i","j","other","ret","addRet","push","dsr","dsc","der","dec","ref","xy2expr","multiple","refs","split"],"mappings":"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","file":"../../core/cell_range.js","sourcesContent":["define(['./alphabet'], function (m_alphabet) {\n    'use strict';\n    class CellRange {\n        constructor(sri, sci, eri, eci, w = 0, h = 0) {\n            this.sri = sri;\n            this.sci = sci;\n            this.eri = eri;\n            this.eci = eci;\n            this.w = w;\n            this.h = h;\n        }\n        set(sri, sci, eri, eci) {\n            this.sri = sri;\n            this.sci = sci;\n            this.eri = eri;\n            this.eci = eci;\n        }\n        multiple() {\n            return this.eri - this.sri > 0 || this.eci - this.sci > 0;\n        }\n        includes(...args) {\n            let [ri, ci] = [\n                0,\n                0\n            ];\n            if (args.length === 1) {\n                [ci, ri] = m_alphabet.expr2xy(args[0]);\n            } else if (args.length === 2) {\n                [ri, ci] = args;\n            }\n            const {sri, sci, eri, eci} = this;\n            return sri <= ri && ri <= eri && sci <= ci && ci <= eci;\n        }\n        each(cb, rowFilter = () => true) {\n            const {sri, sci, eri, eci} = this;\n            for (let i = sri; i <= eri; i += 1) {\n                if (rowFilter(i)) {\n                    for (let j = sci; j <= eci; j += 1) {\n                        cb(i, j);\n                    }\n                }\n            }\n        }\n        contains(other) {\n            return this.sri <= other.sri && this.sci <= other.sci && this.eri >= other.eri && this.eci >= other.eci;\n        }\n        within(other) {\n            return this.sri >= other.sri && this.sci >= other.sci && this.eri <= other.eri && this.eci <= other.eci;\n        }\n        disjoint(other) {\n            return this.sri > other.eri || this.sci > other.eci || other.sri > this.eri || other.sci > this.eci;\n        }\n        intersects(other) {\n            return this.sri <= other.eri && this.sci <= other.eci && other.sri <= this.eri && other.sci <= this.eci;\n        }\n        union(other) {\n            const {sri, sci, eri, eci} = this;\n            return new CellRange(other.sri < sri ? other.sri : sri, other.sci < sci ? other.sci : sci, other.eri > eri ? other.eri : eri, other.eci > eci ? other.eci : eci);\n        }\n        difference(other) {\n            const ret = [];\n            const addRet = (sri, sci, eri, eci) => {\n                ret.push(new CellRange(sri, sci, eri, eci));\n            };\n            const {sri, sci, eri, eci} = this;\n            const dsr = other.sri - sri;\n            const dsc = other.sci - sci;\n            const der = eri - other.eri;\n            const dec = eci - other.eci;\n            if (dsr > 0) {\n                addRet(sri, sci, other.sri - 1, eci);\n                if (der > 0) {\n                    addRet(other.eri + 1, sci, eri, eci);\n                    if (dsc > 0) {\n                        addRet(other.sri, sci, other.eri, other.sci - 1);\n                    }\n                    if (dec > 0) {\n                        addRet(other.sri, other.eci + 1, other.eri, eci);\n                    }\n                } else {\n                    if (dsc > 0) {\n                        addRet(other.sri, sci, eri, other.sci - 1);\n                    }\n                    if (dec > 0) {\n                        addRet(other.sri, other.eci + 1, eri, eci);\n                    }\n                }\n            } else if (der > 0) {\n                addRet(other.eri + 1, sci, eri, eci);\n                if (dsc > 0) {\n                    addRet(sri, sci, other.eri, other.sci - 1);\n                }\n                if (dec > 0) {\n                    addRet(sri, other.eci + 1, other.eri, eci);\n                }\n            }\n            if (dsc > 0) {\n                addRet(sri, sci, eri, other.sci - 1);\n                if (dec > 0) {\n                    addRet(sri, other.eri + 1, eri, eci);\n                    if (dsr > 0) {\n                        addRet(sri, other.sci, other.sri - 1, other.eci);\n                    }\n                    if (der > 0) {\n                        addRet(other.sri + 1, other.sci, eri, other.eci);\n                    }\n                } else {\n                    if (dsr > 0) {\n                        addRet(sri, other.sci, other.sri - 1, eci);\n                    }\n                    if (der > 0) {\n                        addRet(other.sri + 1, other.sci, eri, eci);\n                    }\n                }\n            } else if (dec > 0) {\n                addRet(eri, other.eci + 1, eri, eci);\n                if (dsr > 0) {\n                    addRet(sri, sci, other.sri - 1, other.eci);\n                }\n                if (der > 0) {\n                    addRet(other.eri + 1, sci, eri, other.eci);\n                }\n            }\n            return ret;\n        }\n        size() {\n            return [\n                this.eri - this.sri + 1,\n                this.eci - this.sci + 1\n            ];\n        }\n        toString() {\n            const {sri, sci, eri, eci} = this;\n            let ref = m_alphabet.xy2expr(sci, sri);\n            if (this.multiple()) {\n                ref = `${ ref }:${ m_alphabet.xy2expr(eci, eri) }`;\n            }\n            return ref;\n        }\n        clone() {\n            const {sri, sci, eri, eci, w, h} = this;\n            return new CellRange(sri, sci, eri, eci, w, h);\n        }\n        equals(other) {\n            return this.eri === other.eri && this.eci === other.eci && this.sri === other.sri && this.sci === other.sci;\n        }\n        static valueOf(ref) {\n            const refs = ref.split(':');\n            const [sci, sri] = m_alphabet.expr2xy(refs[0]);\n            let [eri, eci] = [\n                sri,\n                sci\n            ];\n            if (refs.length > 1) {\n                [eci, eri] = m_alphabet.expr2xy(refs[1]);\n            }\n            return new CellRange(sri, sci, eri, eci);\n        }\n    }\n\n    return {\n        CellRange\n    };\n});"]}