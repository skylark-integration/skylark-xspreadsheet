{"version":3,"sources":["core/col.js"],"names":["define","helper","Cols","[object Object]","len","width","indexWidth","minWidth","this","_","d","Object","assign","i","isHide","col","ci","getOrNew","idx","index","setHide","hide","v","style","min","max","rangeSum","getWidth","sumWidth"],"mappings":";;;;;;;AAAAA,QAAQ,YAAa,SAAUC,GAC3B,aAqEA,OACIC,WApEAC,aAAYC,IAACA,EAAGC,MAAEA,EAAKC,WAAEA,EAAUC,SAAEA,IACjCC,KAAKC,KACLD,KAAKJ,IAAMA,EACXI,KAAKH,MAAQA,EACbG,KAAKF,WAAaA,EAClBE,KAAKD,SAAWA,EAEpBJ,QAAQO,GACAA,EAAEN,MACFI,KAAKJ,IAAMM,EAAEN,WACNM,EAAEN,KAEbI,KAAKC,EAAIC,EAEbP,UACI,MAAMC,IAACA,GAAOI,KACd,OAAOG,OAAOC,QAASR,IAAAA,GAAOI,KAAKC,GAEvCN,SAASU,GACL,GAAIL,KAAKM,OAAOD,GACZ,OAAO,EACX,MAAME,EAAMP,KAAKC,EAAEI,GACnB,OAAIE,GAAOA,EAAIV,MACJU,EAAIV,MAERG,KAAKH,MAEhBF,SAASa,GAEL,OADAR,KAAKC,EAAEO,GAAMR,KAAKC,EAAEO,OACbR,KAAKC,EAAEO,GAElBb,SAASa,EAAIX,GACGG,KAAKS,SAASD,GACtBX,MAAQA,EAEhBF,OAAOe,GACH,IAAIC,EAAQD,EACZ,KAAOC,EAAQ,IACXA,GAAS,EACLX,KAAKM,OAAOK,KACZX,KAAKY,QAAQD,GAAO,GAKhChB,OAAOa,GACH,MAAMD,EAAMP,KAAKC,EAAEO,GACnB,OAAOD,GAAOA,EAAIM,KAEtBlB,QAAQa,EAAIM,GACR,MAAMP,EAAMP,KAAKS,SAASD,IAChB,IAANM,EACAP,EAAIM,MAAO,SAEJN,EAAIM,KAEnBlB,SAASa,EAAIO,GACGf,KAAKS,SAASD,GACtBO,MAAQA,EAEhBpB,SAASqB,EAAKC,GACV,OAAOxB,EAAOyB,SAASF,EAAKC,EAAKZ,GAAKL,KAAKmB,SAASd,IAExDV,aACI,OAAOK,KAAKoB,SAAS,EAAGpB,KAAKJ","file":"../../core/col.js","sourcesContent":["define(['./helper'], function (helper) {\n    'use strict';\n    class Cols {\n        constructor({len, width, indexWidth, minWidth}) {\n            this._ = {};\n            this.len = len;\n            this.width = width;\n            this.indexWidth = indexWidth;\n            this.minWidth = minWidth;\n        }\n        setData(d) {\n            if (d.len) {\n                this.len = d.len;\n                delete d.len;\n            }\n            this._ = d;\n        }\n        getData() {\n            const {len} = this;\n            return Object.assign({ len }, this._);\n        }\n        getWidth(i) {\n            if (this.isHide(i))\n                return 0;\n            const col = this._[i];\n            if (col && col.width) {\n                return col.width;\n            }\n            return this.width;\n        }\n        getOrNew(ci) {\n            this._[ci] = this._[ci] || {};\n            return this._[ci];\n        }\n        setWidth(ci, width) {\n            const col = this.getOrNew(ci);\n            col.width = width;\n        }\n        unhide(idx) {\n            let index = idx;\n            while (index > 0) {\n                index -= 1;\n                if (this.isHide(index)) {\n                    this.setHide(index, false);\n                } else\n                    break;\n            }\n        }\n        isHide(ci) {\n            const col = this._[ci];\n            return col && col.hide;\n        }\n        setHide(ci, v) {\n            const col = this.getOrNew(ci);\n            if (v === true)\n                col.hide = true;\n            else\n                delete col.hide;\n        }\n        setStyle(ci, style) {\n            const col = this.getOrNew(ci);\n            col.style = style;\n        }\n        sumWidth(min, max) {\n            return helper.rangeSum(min, max, i => this.getWidth(i));\n        }\n        totalWidth() {\n            return this.sumWidth(0, this.len);\n        }\n    }\n    return {\n        Cols\n    };\n});"]}