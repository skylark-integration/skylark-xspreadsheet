{"version":3,"sources":["core/row.js"],"names":["define","helper","m_alphabet","Rows","[object Object]","len","height","this","_","ri","isHide","row","get","v","getOrNew","idx","index","setHide","hide","style","min","max","exceptSet","rangeSum","i","has","getHeight","sumHeight","cells","ci","undefined","cell","getCell","merge","what","text","getCellOrNew","srcCellRange","dstCellRange","autofill","cb","sri","sci","eri","eci","dsri","dsci","deri","deci","rn","cn","size","drn","dcn","isAdd","dn","j","ii","jj","nri","nci","ncell","cloneDeep","length","n","replace","word","xn","yn","test","expr2expr","result","exec","Number","substring","setCell","ncellmm","each","eachCells","parseInt","includes","src","forEach","setCellText","ndata","x","y","rndata","cellRange","deleteCell","value","keys","Object","col","ks","entries","d","assign"],"mappings":"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","file":"../../core/row.js","sourcesContent":["define([\n    './helper',\n    './alphabet'\n], function (helper, m_alphabet) {\n    'use strict';\n    class Rows {\n        constructor({len, height}) {\n            this._ = {};\n            this.len = len;\n            this.height = height;\n        }\n        getHeight(ri) {\n            if (this.isHide(ri))\n                return 0;\n            const row = this.get(ri);\n            if (row && row.height) {\n                return row.height;\n            }\n            return this.height;\n        }\n        setHeight(ri, v) {\n            const row = this.getOrNew(ri);\n            row.height = v;\n        }\n        unhide(idx) {\n            let index = idx;\n            while (index > 0) {\n                index -= 1;\n                if (this.isHide(index)) {\n                    this.setHide(index, false);\n                } else\n                    break;\n            }\n        }\n        isHide(ri) {\n            const row = this.get(ri);\n            return row && row.hide;\n        }\n        setHide(ri, v) {\n            const row = this.getOrNew(ri);\n            if (v === true)\n                row.hide = true;\n            else\n                delete row.hide;\n        }\n        setStyle(ri, style) {\n            const row = this.getOrNew(ri);\n            row.style = style;\n        }\n        sumHeight(min, max, exceptSet) {\n            return helper.rangeSum(min, max, i => {\n                if (exceptSet && exceptSet.has(i))\n                    return 0;\n                return this.getHeight(i);\n            });\n        }\n        totalHeight() {\n            return this.sumHeight(0, this.len);\n        }\n        get(ri) {\n            return this._[ri];\n        }\n        getOrNew(ri) {\n            this._[ri] = this._[ri] || { cells: {} };\n            return this._[ri];\n        }\n        getCell(ri, ci) {\n            const row = this.get(ri);\n            if (row !== undefined && row.cells !== undefined && row.cells[ci] !== undefined) {\n                return row.cells[ci];\n            }\n            return null;\n        }\n        getCellMerge(ri, ci) {\n            const cell = this.getCell(ri, ci);\n            if (cell && cell.merge)\n                return cell.merge;\n            return [\n                0,\n                0\n            ];\n        }\n        getCellOrNew(ri, ci) {\n            const row = this.getOrNew(ri);\n            row.cells[ci] = row.cells[ci] || {};\n            return row.cells[ci];\n        }\n        setCell(ri, ci, cell, what = 'all') {\n            const row = this.getOrNew(ri);\n            if (what === 'all') {\n                row.cells[ci] = cell;\n            } else if (what === 'text') {\n                row.cells[ci] = row.cells[ci] || {};\n                row.cells[ci].text = cell.text;\n            } else if (what === 'format') {\n                row.cells[ci] = row.cells[ci] || {};\n                row.cells[ci].style = cell.style;\n                if (cell.merge)\n                    row.cells[ci].merge = cell.merge;\n            }\n        }\n        setCellText(ri, ci, text) {\n            const cell = this.getCellOrNew(ri, ci);\n            cell.text = text;\n        }\n        copyPaste(srcCellRange, dstCellRange, what, autofill = false, cb = () => {\n        }) {\n            const {sri, sci, eri, eci} = srcCellRange;\n            const dsri = dstCellRange.sri;\n            const dsci = dstCellRange.sci;\n            const deri = dstCellRange.eri;\n            const deci = dstCellRange.eci;\n            const [rn, cn] = srcCellRange.size();\n            const [drn, dcn] = dstCellRange.size();\n            let isAdd = true;\n            let dn = 0;\n            if (deri < sri || deci < sci) {\n                isAdd = false;\n                if (deri < sri)\n                    dn = drn;\n                else\n                    dn = dcn;\n            }\n            for (let i = sri; i <= eri; i += 1) {\n                if (this._[i]) {\n                    for (let j = sci; j <= eci; j += 1) {\n                        if (this._[i].cells && this._[i].cells[j]) {\n                            for (let ii = dsri; ii <= deri; ii += rn) {\n                                for (let jj = dsci; jj <= deci; jj += cn) {\n                                    const nri = ii + (i - sri);\n                                    const nci = jj + (j - sci);\n                                    const ncell = helper.cloneDeep(this._[i].cells[j]);\n                                    if (autofill && ncell && ncell.text && ncell.text.length > 0) {\n                                        const {text} = ncell;\n                                        let n = jj - dsci + (ii - dsri) + 2;\n                                        if (!isAdd) {\n                                            n -= dn + 1;\n                                        }\n                                        if (text[0] === '=') {\n                                            ncell.text = text.replace(/[a-zA-Z]{1,3}\\d+/g, word => {\n                                                let [xn, yn] = [\n                                                    0,\n                                                    0\n                                                ];\n                                                if (sri === dsri) {\n                                                    xn = n - 1;\n                                                } else {\n                                                    yn = n - 1;\n                                                }\n                                                if (/^\\d+$/.test(word))\n                                                    return word;\n                                                return m_alphabet.expr2expr(word, xn, yn);\n                                            });\n                                        } else if (rn <= 1 && cn > 1 && (dsri > eri || deri < sri) || cn <= 1 && rn > 1 && (dsci > eci || deci < sci) || rn <= 1 && cn <= 1) {\n                                            const result = /[\\\\.\\d]+$/.exec(text);\n                                            if (result !== null) {\n                                                const index = Number(result[0]) + n - 1;\n                                                ncell.text = text.substring(0, result.index) + index;\n                                            }\n                                        }\n                                    }\n                                    this.setCell(nri, nci, ncell, what);\n                                    cb(nri, nci, ncell);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        cutPaste(srcCellRange, dstCellRange) {\n            const ncellmm = {};\n            this.each(ri => {\n                this.eachCells(ri, ci => {\n                    let nri = parseInt(ri, 10);\n                    let nci = parseInt(ci, 10);\n                    if (srcCellRange.includes(ri, ci)) {\n                        nri = dstCellRange.sri + (nri - srcCellRange.sri);\n                        nci = dstCellRange.sci + (nci - srcCellRange.sci);\n                    }\n                    ncellmm[nri] = ncellmm[nri] || { cells: {} };\n                    ncellmm[nri].cells[nci] = this._[ri].cells[ci];\n                });\n            });\n            this._ = ncellmm;\n        }\n        paste(src, dstCellRange) {\n            if (src.length <= 0)\n                return;\n            const {sri, sci} = dstCellRange;\n            src.forEach((row, i) => {\n                const ri = sri + i;\n                row.forEach((cell, j) => {\n                    const ci = sci + j;\n                    this.setCellText(ri, ci, cell);\n                });\n            });\n        }\n        insert(sri, n = 1) {\n            const ndata = {};\n            this.each((ri, row) => {\n                let nri = parseInt(ri, 10);\n                if (nri >= sri) {\n                    nri += n;\n                    this.eachCells(ri, (ci, cell) => {\n                        if (cell.text && cell.text[0] === '=') {\n                            cell.text = cell.text.replace(/[a-zA-Z]{1,3}\\d+/g, word => m_alphabet.expr2expr(word, 0, n, (x, y) => y >= sri));\n                        }\n                    });\n                }\n                ndata[nri] = row;\n            });\n            this._ = ndata;\n            this.len += n;\n        }\n        delete(sri, eri) {\n            const n = eri - sri + 1;\n            const ndata = {};\n            this.each((ri, row) => {\n                const nri = parseInt(ri, 10);\n                if (nri < sri) {\n                    ndata[nri] = row;\n                } else if (ri > eri) {\n                    ndata[nri - n] = row;\n                    this.eachCells(ri, (ci, cell) => {\n                        if (cell.text && cell.text[0] === '=') {\n                            cell.text = cell.text.replace(/[a-zA-Z]{1,3}\\d+/g, word => m_alphabet.expr2expr(word, 0, -n, (x, y) => y > eri));\n                        }\n                    });\n                }\n            });\n            this._ = ndata;\n            this.len -= n;\n        }\n        insertColumn(sci, n = 1) {\n            this.each((ri, row) => {\n                const rndata = {};\n                this.eachCells(ri, (ci, cell) => {\n                    let nci = parseInt(ci, 10);\n                    if (nci >= sci) {\n                        nci += n;\n                        if (cell.text && cell.text[0] === '=') {\n                            cell.text = cell.text.replace(/[a-zA-Z]{1,3}\\d+/g, word => m_alphabet.expr2expr(word, n, 0, x => x >= sci));\n                        }\n                    }\n                    rndata[nci] = cell;\n                });\n                row.cells = rndata;\n            });\n        }\n        deleteColumn(sci, eci) {\n            const n = eci - sci + 1;\n            this.each((ri, row) => {\n                const rndata = {};\n                this.eachCells(ri, (ci, cell) => {\n                    const nci = parseInt(ci, 10);\n                    if (nci < sci) {\n                        rndata[nci] = cell;\n                    } else if (nci > eci) {\n                        rndata[nci - n] = cell;\n                        if (cell.text && cell.text[0] === '=') {\n                            cell.text = cell.text.replace(/[a-zA-Z]{1,3}\\d+/g, word => m_alphabet.expr2expr(word, -n, 0, x => x > eci));\n                        }\n                    }\n                });\n                row.cells = rndata;\n            });\n        }\n        deleteCells(cellRange, what = 'all') {\n            cellRange.each((i, j) => {\n                this.deleteCell(i, j, what);\n            });\n        }\n        deleteCell(ri, ci, what = 'all') {\n            const row = this.get(ri);\n            if (row !== null) {\n                const cell = this.getCell(ri, ci);\n                if (cell !== null) {\n                    if (what === 'all') {\n                        delete row.cells[ci];\n                    } else if (what === 'text') {\n                        if (cell.text)\n                            delete cell.text;\n                        if (cell.value)\n                            delete cell.value;\n                    } else if (what === 'format') {\n                        if (cell.style !== undefined)\n                            delete cell.style;\n                        if (cell.merge)\n                            delete cell.merge;\n                    } else if (what === 'merge') {\n                        if (cell.merge)\n                            delete cell.merge;\n                    }\n                }\n            }\n        }\n        maxCell() {\n            const keys = Object.keys(this._);\n            const ri = keys[keys.length - 1];\n            const col = this._[ri];\n            if (col) {\n                const {cells} = col;\n                const ks = Object.keys(cells);\n                const ci = ks[ks.length - 1];\n                return [\n                    parseInt(ri, 10),\n                    parseInt(ci, 10)\n                ];\n            }\n            return [\n                0,\n                0\n            ];\n        }\n        each(cb) {\n            Object.entries(this._).forEach(([ri, row]) => {\n                cb(ri, row);\n            });\n        }\n        eachCells(ri, cb) {\n            if (this._[ri] && this._[ri].cells) {\n                Object.entries(this._[ri].cells).forEach(([ci, cell]) => {\n                    cb(ci, cell);\n                });\n            }\n        }\n        setData(d) {\n            if (d.len) {\n                this.len = d.len;\n                delete d.len;\n            }\n            this._ = d;\n        }\n        getData() {\n            const {len} = this;\n            return Object.assign({ len }, this._);\n        }\n    }\n    return {\n        Rows\n    };\n});"]}