{"version":3,"sources":["core/format.js"],"names":["define","m_locale","formatStringRender","v","formatNumberRender","test","v1","Number","toFixed","toString","first","parts","split","replace","baseFormats","key","title","tf","type","render","label","formatm","forEach","f"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAqB,SAAUC,GACnC,aACA,MAAMC,EAAqBC,GAAKA,EAC1BC,EAAqBD,IACvB,GAAI,iBAAiBE,KAAKF,GAAI,CAC1B,MAAMG,EAAKC,OAAOJ,GAAGK,QAAQ,GAAGC,YACzBC,KAAUC,GAASL,EAAGM,MAAM,OACnC,OACIF,EAAMG,QAAQ,0BAA2B,UACtCF,GAGX,OAAOR,GAELW,IAEEC,IAAK,SACLC,MAAOf,EAASgB,GAAG,iBACnBC,KAAM,SACNC,OAAQjB,IAGRa,IAAK,OACLC,MAAOf,EAASgB,GAAG,eACnBC,KAAM,SACNC,OAAQjB,IAGRa,IAAK,SACLC,MAAOf,EAASgB,GAAG,iBACnBC,KAAM,SACNE,MAAO,WACPD,OAAQf,IAGRW,IAAK,UACLC,MAAOf,EAASgB,GAAG,kBACnBC,KAAM,SACNE,MAAO,SACPD,OAAQhB,MAASA,OAGjBY,IAAK,MACLC,MAAOf,EAASgB,GAAG,cACnBC,KAAM,SACNE,MAAO,SACPD,OAAQhB,OAAUC,EAAmBD,OAGrCY,IAAK,MACLC,MAAOf,EAASgB,GAAG,cACnBC,KAAM,SACNE,MAAO,SACPD,OAAQhB,OAAUC,EAAmBD,OAGrCY,IAAK,MACLC,MAAOf,EAASgB,GAAG,cACnBC,KAAM,SACNE,MAAO,SACPD,OAAQhB,OAAUC,EAAmBD,OAGrCY,IAAK,OACLC,MAAOf,EAASgB,GAAG,eACnBC,KAAM,OACNE,MAAO,aACPD,OAAQjB,IAGRa,IAAK,OACLC,MAAOf,EAASgB,GAAG,eACnBC,KAAM,OACNE,MAAO,WACPD,OAAQjB,IAGRa,IAAK,WACLC,MAAOf,EAASgB,GAAG,mBACnBC,KAAM,OACNE,MAAO,sBACPD,OAAQjB,IAGRa,IAAK,WACLC,MAAOf,EAASgB,GAAG,mBACnBC,KAAM,OACNE,MAAO,WACPD,OAAQjB,IAGVmB,KAKN,OAJAP,EAAYQ,QAAQC,IAChBF,EAAQE,EAAER,KAAOQ,KAIjBF,QAAAA,EACAP,YAAAA","file":"../../core/format.js","sourcesContent":["define(['../locale/locale'], function (m_locale) {\n    'use strict';\n    const formatStringRender = v => v;\n    const formatNumberRender = v => {\n        if (/^(-?\\d*.?\\d*)$/.test(v)) {\n            const v1 = Number(v).toFixed(2).toString();\n            const [first, ...parts] = v1.split('\\\\.');\n            return [\n                first.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,'),\n                ...parts\n            ];\n        }\n        return v;\n    };\n    const baseFormats = [\n        {\n            key: 'normal',\n            title: m_locale.tf('format.normal'),\n            type: 'string',\n            render: formatStringRender\n        },\n        {\n            key: 'text',\n            title: m_locale.tf('format.text'),\n            type: 'string',\n            render: formatStringRender\n        },\n        {\n            key: 'number',\n            title: m_locale.tf('format.number'),\n            type: 'number',\n            label: '1,000.12',\n            render: formatNumberRender\n        },\n        {\n            key: 'percent',\n            title: m_locale.tf('format.percent'),\n            type: 'number',\n            label: '10.12%',\n            render: v => `${ v }%`\n        },\n        {\n            key: 'rmb',\n            title: m_locale.tf('format.rmb'),\n            type: 'number',\n            label: '\\uFFE510.00',\n            render: v => `￥${ formatNumberRender(v) }`\n        },\n        {\n            key: 'usd',\n            title: m_locale.tf('format.usd'),\n            type: 'number',\n            label: '$10.00',\n            render: v => `$${ formatNumberRender(v) }`\n        },\n        {\n            key: 'eur',\n            title: m_locale.tf('format.eur'),\n            type: 'number',\n            label: '\\u20AC10.00',\n            render: v => `€${ formatNumberRender(v) }`\n        },\n        {\n            key: 'date',\n            title: m_locale.tf('format.date'),\n            type: 'date',\n            label: '26/09/2008',\n            render: formatStringRender\n        },\n        {\n            key: 'time',\n            title: m_locale.tf('format.time'),\n            type: 'date',\n            label: '15:59:00',\n            render: formatStringRender\n        },\n        {\n            key: 'datetime',\n            title: m_locale.tf('format.datetime'),\n            type: 'date',\n            label: '26/09/2008 15:59:00',\n            render: formatStringRender\n        },\n        {\n            key: 'duration',\n            title: m_locale.tf('format.duration'),\n            type: 'date',\n            label: '24:01:00',\n            render: formatStringRender\n        }\n    ];\n    const formatm = {};\n    baseFormats.forEach(f => {\n        formatm[f.key] = f;\n    });\n\n    return {\n        formatm,\n        baseFormats\n    };\n});"]}