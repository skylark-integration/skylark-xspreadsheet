/**
 * skylark-xspreadsheet - A version of xspreadsheet.js that ported to running on skylarkjs.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["./helper","./alphabet"],function(e,t){"use strict";return{Rows:class{constructor({len:e,height:t}){this._={},this.len=e,this.height=t}getHeight(e){if(this.isHide(e))return 0;const t=this.get(e);return t&&t.height?t.height:this.height}setHeight(e,t){this.getOrNew(e).height=t}unhide(e){let t=e;for(;t>0&&(t-=1,this.isHide(t));)this.setHide(t,!1)}isHide(e){const t=this.get(e);return t&&t.hide}setHide(e,t){const s=this.getOrNew(e);!0===t?s.hide=!0:delete s.hide}setStyle(e,t){this.getOrNew(e).style=t}sumHeight(t,s,l){return e.rangeSum(t,s,e=>l&&l.has(e)?0:this.getHeight(e))}totalHeight(){return this.sumHeight(0,this.len)}get(e){return this._[e]}getOrNew(e){return this._[e]=this._[e]||{cells:{}},this._[e]}getCell(e,t){const s=this.get(e);return void 0!==s&&void 0!==s.cells&&void 0!==s.cells[t]?s.cells[t]:null}getCellMerge(e,t){const s=this.getCell(e,t);return s&&s.merge?s.merge:[0,0]}getCellOrNew(e,t){const s=this.getOrNew(e);return s.cells[t]=s.cells[t]||{},s.cells[t]}setCell(e,t,s,l="all"){const i=this.getOrNew(e);"all"===l?i.cells[t]=s:"text"===l?(i.cells[t]=i.cells[t]||{},i.cells[t].text=s.text):"format"===l&&(i.cells[t]=i.cells[t]||{},i.cells[t].style=s.style,s.merge&&(i.cells[t].merge=s.merge))}setCellText(e,t,s){this.getCellOrNew(e,t).text=s}copyPaste(s,l,i,h=!1,r=(()=>{})){const{sri:c,sci:n,eri:a,eci:g}=s,o=l.sri,x=l.sci,d=l.eri,u=l.eci,[p,f]=s.size(),[C,_]=l.size();let m=!0,O=0;(d<c||u<n)&&(m=!1,O=d<c?C:_);for(let s=c;s<=a;s+=1)if(this._[s])for(let l=n;l<=g;l+=1)if(this._[s].cells&&this._[s].cells[l])for(let C=o;C<=d;C+=p)for(let _=x;_<=u;_+=f){const H=C+(s-c),w=_+(l-n),y=e.cloneDeep(this._[s].cells[l]);if(h&&y&&y.text&&y.text.length>0){const{text:e}=y;let s=_-x+(C-o)+2;if(m||(s-=O+1),"="===e[0])y.text=e.replace(/[a-zA-Z]{1,3}\d+/g,e=>{let[l,i]=[0,0];return c===o?l=s-1:i=s-1,/^\d+$/.test(e)?e:t.expr2expr(e,l,i)});else if(p<=1&&f>1&&(o>a||d<c)||f<=1&&p>1&&(x>g||u<n)||p<=1&&f<=1){const t=/[\\.\d]+$/.exec(e);if(null!==t){const l=Number(t[0])+s-1;y.text=e.substring(0,t.index)+l}}}this.setCell(H,w,y,i),r(H,w,y)}}cutPaste(e,t){const s={};this.each(l=>{this.eachCells(l,i=>{let h=parseInt(l,10),r=parseInt(i,10);e.includes(l,i)&&(h=t.sri+(h-e.sri),r=t.sci+(r-e.sci)),s[h]=s[h]||{cells:{}},s[h].cells[r]=this._[l].cells[i]})}),this._=s}paste(e,t){if(e.length<=0)return;const{sri:s,sci:l}=t;e.forEach((e,t)=>{const i=s+t;e.forEach((e,t)=>{const s=l+t;this.setCellText(i,s,e)})})}insert(e,s=1){const l={};this.each((i,h)=>{let r=parseInt(i,10);r>=e&&(r+=s,this.eachCells(i,(l,i)=>{i.text&&"="===i.text[0]&&(i.text=i.text.replace(/[a-zA-Z]{1,3}\d+/g,l=>t.expr2expr(l,0,s,(t,s)=>s>=e)))})),l[r]=h}),this._=l,this.len+=s}delete(e,s){const l=s-e+1,i={};this.each((h,r)=>{const c=parseInt(h,10);c<e?i[c]=r:h>s&&(i[c-l]=r,this.eachCells(h,(e,i)=>{i.text&&"="===i.text[0]&&(i.text=i.text.replace(/[a-zA-Z]{1,3}\d+/g,e=>t.expr2expr(e,0,-l,(e,t)=>t>s)))}))}),this._=i,this.len-=l}insertColumn(e,s=1){this.each((l,i)=>{const h={};this.eachCells(l,(l,i)=>{let r=parseInt(l,10);r>=e&&(r+=s,i.text&&"="===i.text[0]&&(i.text=i.text.replace(/[a-zA-Z]{1,3}\d+/g,l=>t.expr2expr(l,s,0,t=>t>=e)))),h[r]=i}),i.cells=h})}deleteColumn(e,s){const l=s-e+1;this.each((i,h)=>{const r={};this.eachCells(i,(i,h)=>{const c=parseInt(i,10);c<e?r[c]=h:c>s&&(r[c-l]=h,h.text&&"="===h.text[0]&&(h.text=h.text.replace(/[a-zA-Z]{1,3}\d+/g,e=>t.expr2expr(e,-l,0,e=>e>s))))}),h.cells=r})}deleteCells(e,t="all"){e.each((e,s)=>{this.deleteCell(e,s,t)})}deleteCell(e,t,s="all"){const l=this.get(e);if(null!==l){const i=this.getCell(e,t);null!==i&&("all"===s?delete l.cells[t]:"text"===s?(i.text&&delete i.text,i.value&&delete i.value):"format"===s?(void 0!==i.style&&delete i.style,i.merge&&delete i.merge):"merge"===s&&i.merge&&delete i.merge)}}maxCell(){const e=Object.keys(this._),t=e[e.length-1],s=this._[t];if(s){const{cells:e}=s,l=Object.keys(e),i=l[l.length-1];return[parseInt(t,10),parseInt(i,10)]}return[0,0]}each(e){Object.entries(this._).forEach(([t,s])=>{e(t,s)})}eachCells(e,t){this._[e]&&this._[e].cells&&Object.entries(this._[e].cells).forEach(([e,s])=>{t(e,s)})}setData(e){e.len&&(this.len=e.len,delete e.len),this._=e}getData(){const{len:e}=this;return Object.assign({len:e},this._)}}}});
//# sourceMappingURL=../sourcemaps/core/row.js.map
